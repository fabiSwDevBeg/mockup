{"version":3,"file":"chunks/51410.80b25b7863b6f71373b7.min.js","mappings":"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","sources":["webpack://@plone/mockup/./src/pat/contentbrowser/src/utils.js","webpack://@plone/mockup/./src/pat/contentbrowser/src/SelectedItem.svelte","webpack://@plone/mockup/./src/pat/contentbrowser/src/SelectedItem.svelte?73f0","webpack://@plone/mockup/SelectedItem.svelte"],"sourcesContent":["import utils from \"../../../core/utils.js\";\n\nexport async function request({\n    method = \"GET\",\n    vocabularyUrl = null,\n    attributes = [],\n    path = null,\n    uids = null,\n    searchTerm = null,\n    searchPath = null,\n    levelInfoPath = null,\n    selectableTypes = [],\n    pageSize = 100,\n    page = 1,\n}) {\n    let vocabQuery = {\n        criteria: [],\n    };\n    if (path) {\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"path\",\n                    o: \"plone.app.querystring.operation.string.path\",\n                    v: `${path}::1`,\n                },\n            ],\n            sort_on: \"getObjPositionInParent\",\n            sort_order: \"ascending\",\n        };\n    }\n    if (levelInfoPath) {\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"path\",\n                    o: \"plone.app.querystring.operation.string.path\",\n                    v: `${levelInfoPath}::0`,\n                },\n            ],\n        };\n    }\n    if (searchPath) {\n        // search from searchPath down\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"path\",\n                    o: \"plone.app.querystring.operation.string.path\",\n                    v: searchPath,\n                },\n            ],\n        };\n        if (selectableTypes) {\n            vocabQuery.criteria.push({\n                i: \"portal_type\",\n                o: \"plone.app.querystring.operation.list.contains\",\n                v: selectableTypes,\n            })\n        }\n    }\n    if (uids) {\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"UID\",\n                    o: \"plone.app.querystring.operation.list.contains\",\n                    v: uids,\n                },\n            ],\n        };\n    }\n    if (searchTerm) {\n        vocabQuery.criteria.push({\n            i: \"SearchableText\",\n            o: \"plone.app.querystring.operation.string.contains\",\n            v: `${searchTerm}`,\n\n        })\n    }\n\n    if (!vocabQuery.criteria.length) {\n        return {\n            results: [],\n            total: 0,\n        }\n    };\n    let url = `${vocabularyUrl}&query=${JSON.stringify(\n        vocabQuery\n    )}&attributes=${JSON.stringify(attributes)}&batch=${JSON.stringify({\n        page: page,\n        size: pageSize,\n    })}`;\n\n    let headers = new Headers();\n    headers.set(\"Accept\", \"application/json\");\n\n    const response = await fetch(url, {\n        method: method,\n        headers: headers,\n    });\n    const json = await response.json();\n\n    if (response.ok) {\n        if (!searchPath && !levelInfoPath && selectableTypes.length) {\n            // we iter through response and filter out non-selectable\n            // types but keep folderish types to maintain browsing\n            // the content structure.\n            const filtered_response = {\n                results: [],\n                total: json.total,\n            }\n            for (const it of json.results) {\n                if (selectableTypes.indexOf(it.portal_type) != -1 || it.is_folderish) {\n                    filtered_response.results.push(it);\n                }\n            }\n            return filtered_response;\n        }\n        return json;\n    } else {\n        return {\n            results: [],\n            total: 0,\n            errors: json.errors,\n        };\n    }\n}\n\nexport async function get_items_from_uids(uids, config) {\n    if (!uids) {\n        return [];\n    }\n    const selectedItemsFromUids = await request({\n        vocabularyUrl: config.vocabularyUrl,\n        attributes: config.attributes,\n        uids: uids,\n    });\n    let results = (await selectedItemsFromUids?.results) || [];\n    // resort the results based on the order of uids\n    results.sort((a, b) => {\n        return uids.indexOf(a.UID) - uids.indexOf(b.UID);\n    })\n    return results;\n}\n\n\n/** use Plone resolveIcon to load a SVG icon and replace node with icon code */\nexport async function resolveIcon(node, { iconName }) {\n\n    async function getIcon(iconName) {\n        const icon = await utils.resolveIcon(iconName)\n        return icon;\n    }\n    const iconCode = await getIcon(iconName);\n    node.outerHTML = iconCode;\n    return {\n        destroy() { },\n    };\n}\n\n/** Dispatch event on click outside of node */\nexport function clickOutside(node) {\n    const handleClick = (event) => {\n        if (node && !node.contains(event.target)) {\n            node.dispatchEvent(new CustomEvent(\"click_outside\", node));\n        }\n    };\n\n    document.addEventListener(\"click\", handleClick, true);\n\n    return {\n        destroy() {\n            document.removeEventListener(\"click\", handleClick, true);\n        },\n    };\n}\n\nexport function recentlyUsedItems(filterItems, config) {\n    let ret = utils.storage.get(config.recentlyUsedKey) || [];\n    // hard-limit to 1000 entries\n    ret = ret.slice(ret.length - 1000, ret.length);\n    if (filterItems && config?.selectableTypes.length) {\n        ret = ret.filter((it) => {\n            return config.selectableTypes.indexOf(it.portal_type) != -1;\n        });\n    }\n    // max is applied AFTER filtering selectable items.\n    const max = parseInt(config.recentlyUsedMaxItems, 10);\n    if (max) {\n        // return the slice from the end, as we want to display newest items first.\n        ret = ret.slice(ret.length - max, ret.length);\n    }\n    return ret;\n}\n\nexport function updateRecentlyUsed(item, config) {\n    if (!config.recentlyUsed) {\n        return;\n    }\n    // add to recently added items\n    const recentlyUsed = recentlyUsedItems(false, config); // do not filter for selectable but get all. append to that list the new item.\n    const alreadyPresent = recentlyUsed.filter((it) => {\n        return it.UID === item.UID;\n    });\n    if (alreadyPresent.length > 0) {\n        recentlyUsed.splice(recentlyUsed.indexOf(alreadyPresent[0]), 1);\n    }\n    recentlyUsed.push(item);\n    utils.storage.set(config.recentlyUsedKey, recentlyUsed);\n}\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".selected-item.svelte-b5z3s7.svelte-b5z3s7{display:flex;flex-wrap:nowrap;align-items:start;justify-content:space-between;cursor:move}.selected-item.svelte-b5z3s7>.svelte-b5z3s7{margin-right:.5rem;display:block}.selected-item.svelte-b5z3s7 button.svelte-b5z3s7{cursor:pointer;padding:0 .375rem .374rem 0}.selected-item.svelte-b5z3s7 .item-info.svelte-b5z3s7{display:flex;align-items:start}.selected-item.svelte-b5z3s7>img.svelte-b5z3s7{object-fit:cover;width:95px;height:95px}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/pat/contentbrowser/src/SelectedItem.svelte\"],\"names\":[],\"mappings\":\"AAAA,2CAAA,YAAA,CAAA,gBAAA,CAAA,iBAAA,CAAA,6BAAA,CAAA,WAAA,CAAA,4CAAA,kBAAA,CAAA,aAAA,CAAA,kDAAA,cAAA,CAAA,2BAAA,CAAA,sDAAA,YAAA,CAAA,iBAAA,CAAA,+CAAA,gBAAA,CAAA,UAAA,CAAA,WAAA\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"../../../../node_modules/@patternslib/dev/webpack/style-inserter.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!../../../../node_modules/svelte-loader/index.js?cssPath=/home/runner/work/mockup/mockup/src/pat/contentbrowser/src/SelectedItem.svelte.0.css!./SelectedItem.svelte\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn;\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!../../../../node_modules/svelte-loader/index.js?cssPath=/home/runner/work/mockup/mockup/src/pat/contentbrowser/src/SelectedItem.svelte.0.css!./SelectedItem.svelte\";\n       export default content && content.locals ? content.locals : undefined;\n","<script>\n    import { getContext } from \"svelte\";\n    import { resolveIcon } from \"./utils\";\n\n    // current item index of parent iteration\n    export let idx;\n    // item data\n    export let item;\n\n    // parent method to remove selected item from list\n    const unselectItem = getContext(\"unselectItem\");\n\n</script>\n\n<div class=\"selected-item border border-secondary-subtle rounded p-2 mb-1 bg-body-tertiary\" data-uuid={item.UID}>\n    <div class=\"item-info\">\n        <!-- svelte-ignore a11y-missing-attribute -->\n        <button\n            class=\"btn btn-link btn-sm link-secondary\"\n            on:click={() => unselectItem(idx)}\n            ><svg use:resolveIcon={{ iconName: \"x-circle\" }} /></button\n        >\n        <div>\n            <span class=\"item-title\">{item.Title}</span><br />\n            <span class=\"small\">{item.path}</span>\n        </div>\n    </div>\n    {#if item.getURL && (item.getIcon || item.portal_type === \"Image\")}<img\n            src=\"{item.getURL}/@@images/image/mini\"\n            alt={item.Title}\n        />{/if}\n</div>\n\n<style>\n    .selected-item {\n        display: flex;\n        flex-wrap: nowrap;\n        align-items: start;\n        justify-content: space-between;\n        cursor: move;\n    }\n    .selected-item > * {\n        margin-right: 0.5rem;\n        display: block;\n    }\n    .selected-item button {\n        cursor: pointer;\n        padding: 0 0.375rem 0.374rem 0;\n    }\n    .selected-item .item-info {\n        display: flex;\n        align-items: start;\n    }\n    .selected-item > img {\n        object-fit: cover;\n        width: 95px;\n        height: 95px;\n    }\n</style>\n"],"names":["async","request","_ref","method","vocabularyUrl","attributes","path","uids","searchTerm","searchPath","levelInfoPath","selectableTypes","pageSize","page","vocabQuery","criteria","i","o","v","sort_on","sort_order","push","length","results","total","url","JSON","stringify","size","headers","Headers","set","response","fetch","json","ok","filtered_response","it","indexOf","portal_type","is_folderish","errors","get_items_from_uids","config","selectedItemsFromUids","sort","a","b","UID","resolveIcon","node","_ref2","iconName","iconCode","utils","getIcon","outerHTML","destroy","clickOutside","handleClick","event","contains","target","dispatchEvent","CustomEvent","document","addEventListener","removeEventListener","recentlyUsedItems","filterItems","ret","storage","get","recentlyUsedKey","slice","filter","max","parseInt","recentlyUsedMaxItems","updateRecentlyUsed","item","recentlyUsed","alreadyPresent","splice","___CSS_LOADER_EXPORT___","module","id","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","getURL","Title","idx","unselectItem"],"sourceRoot":""}