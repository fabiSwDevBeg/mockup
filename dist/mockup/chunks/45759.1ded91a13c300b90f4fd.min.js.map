{"version":3,"file":"chunks/45759.1ded91a13c300b90f4fd.min.js","mappings":"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","sources":["webpack://@plone/mockup/src/index.ts"],"sourcesContent":["import type {\n  AddonReducersConfig,\n  AddonRoutesConfig,\n  BlocksConfig,\n  ComponentsConfig,\n  ExperimentalConfig,\n  SettingsConfig,\n  GetSlotArgs,\n  GetSlotReturn,\n  SlotComponent,\n  SlotPredicate,\n  SlotsConfig,\n  UtilitiesConfig,\n  ViewsConfig,\n  WidgetsConfig,\n} from '@plone/types';\n\nexport type ConfigData = {\n  settings: SettingsConfig;\n  blocks: BlocksConfig;\n  views: ViewsConfig;\n  widgets: WidgetsConfig;\n  addonReducers: AddonReducersConfig;\n  addonRoutes: AddonRoutesConfig;\n  slots: SlotsConfig;\n  components: ComponentsConfig;\n  utilities: UtilitiesConfig;\n  experimental: ExperimentalConfig;\n};\n\ntype GetComponentResult = {\n  component: React.ComponentType<any>;\n};\n\ntype GetUtilityResult = {\n  method: (...args: any[]) => any;\n};\n\nexport type ConfigType = InstanceType<typeof Config>;\n\nclass Config {\n  public _data: ConfigData | Record<string, never>;\n  static instance: ConfigType;\n\n  constructor() {\n    if (!Config.instance) {\n      this._data = {};\n      Config.instance = this;\n    }\n\n    return Config.instance;\n  }\n\n  set<RegistryKey extends keyof ConfigData>(\n    registry: RegistryKey,\n    item: ConfigData[RegistryKey],\n  ) {\n    this._data[registry] = item;\n  }\n\n  get(registry: keyof ConfigData) {\n    return this._data[registry];\n  }\n\n  get settings() {\n    return this._data.settings;\n  }\n\n  set settings(settings) {\n    this._data.settings = settings;\n  }\n\n  get experimental() {\n    return this._data.experimental;\n  }\n\n  set experimental(experimental) {\n    this._data.experimental = experimental;\n  }\n\n  get blocks() {\n    return this._data.blocks;\n  }\n\n  set blocks(blocks) {\n    this._data.blocks = blocks;\n  }\n\n  get views() {\n    return this._data.views;\n  }\n\n  set views(views) {\n    this._data.views = views;\n  }\n\n  get widgets() {\n    return this._data.widgets;\n  }\n\n  set widgets(widgets) {\n    this._data.widgets = widgets;\n  }\n\n  get addonReducers() {\n    return this._data.addonReducers;\n  }\n\n  set addonReducers(addonReducers) {\n    this._data.addonReducers = addonReducers;\n  }\n\n  get addonRoutes() {\n    return this._data.addonRoutes;\n  }\n\n  set addonRoutes(addonRoutes) {\n    this._data.addonRoutes = addonRoutes;\n  }\n\n  get slots() {\n    return this._data.slots;\n  }\n\n  set slots(slots) {\n    this._data.slots = slots;\n  }\n\n  get components() {\n    return this._data.components;\n  }\n\n  set components(components) {\n    this._data.components = components;\n  }\n\n  get utilities() {\n    return this._data.utilities;\n  }\n\n  set utilities(utilities) {\n    this._data.utilities = utilities;\n  }\n\n  getComponent(\n    options: { name: string; dependencies?: string[] | string } | string,\n  ): GetComponentResult {\n    if (typeof options === 'object') {\n      const { name, dependencies = '' } = options;\n      let depsString: string = '';\n      if (dependencies && Array.isArray(dependencies)) {\n        depsString = dependencies.join('+');\n      } else if (typeof dependencies === 'string') {\n        depsString = dependencies;\n      }\n      const componentName = `${name}${depsString ? `|${depsString}` : ''}`;\n\n      return this._data.components[componentName] || {};\n    } else {\n      // Shortcut notation, accepting a lonely string as argument\n      const componentName = options;\n      return this._data.components[componentName] || {};\n    }\n  }\n\n  registerComponent(options: {\n    name: string;\n    dependencies?: string[] | string;\n    component: React.ComponentType;\n  }) {\n    const { name, component, dependencies = '' } = options;\n    let depsString: string = '';\n    if (!component) {\n      throw new Error('No component provided');\n    } else {\n      if (dependencies && Array.isArray(dependencies)) {\n        depsString = dependencies.join('+');\n      } else if (typeof dependencies === 'string') {\n        depsString = dependencies;\n      }\n      const componentName = `${name}${depsString ? `|${depsString}` : ''}`;\n\n      this._data.components[componentName] = { component };\n      // Try to set a displayName (useful for React dev tools) for the registered component\n      // Only if it's a function and it's not set previously\n      try {\n        const displayName =\n          this._data.components[componentName].component.displayName;\n\n        if (\n          !displayName &&\n          typeof this._data.components[componentName].component === 'function'\n        ) {\n          this._data.components[componentName].component.displayName = name;\n        }\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.warn(`Not setting the component displayName because ${error}`);\n      }\n    }\n  }\n\n  getSlot(name: string, args: GetSlotArgs): GetSlotReturn {\n    if (!this._data.slots[name]) {\n      return;\n    }\n    const { slots, data } = this._data.slots[name];\n    const slotComponents = [];\n    // For all enabled slots\n    for (const slotName of slots) {\n      // For all registered components for that slot, inversed, since the last one registered wins\n      // TODO: Cover ZCA use case, where if more predicates, more specificity wins if all true.\n      // Let's keep it simple here and stick to the registered order.\n      let noPredicateComponent: SlotComponent | undefined;\n      const reversedSlotComponents = data[slotName].slice().reverse(); // Immutable reversed copy\n      for (const slotComponent of reversedSlotComponents) {\n        let isPredicateTrueFound: boolean = false;\n        if (slotComponent.predicates) {\n          isPredicateTrueFound = slotComponent.predicates.every((predicate) =>\n            predicate(args),\n          );\n        } else {\n          // We mark the one with no predicates\n          noPredicateComponent = slotComponent;\n        }\n\n        // If all the predicates are truthy\n        if (isPredicateTrueFound) {\n          slotComponents.push({\n            component: slotComponent.component,\n            name: slotName,\n          });\n          // We \"reset\" the marker, we already found a candidate\n          noPredicateComponent = undefined;\n          break;\n        }\n      }\n\n      if (noPredicateComponent) {\n        slotComponents.push({\n          component: noPredicateComponent.component,\n          name: slotName,\n        });\n      }\n    }\n\n    return slotComponents;\n  }\n\n  registerSlotComponent(options: {\n    slot: string;\n    name: string;\n    predicates?: SlotPredicate[];\n    component: SlotComponent['component'];\n  }): void {\n    const { name, component, predicates, slot } = options;\n\n    if (!component) {\n      throw new Error('No component provided');\n    }\n    if (!predicates) {\n      // Test if there's already one registered, we only support one\n      const hasRegisteredNoPredicatesComponent = this._data.slots?.[\n        slot\n      ]?.data?.[name]?.find(({ predicates }) => !predicates);\n      if (\n        hasRegisteredNoPredicatesComponent &&\n        component !== hasRegisteredNoPredicatesComponent.component\n      ) {\n        throw new Error(\n          `There is already registered a component ${name} for the slot ${slot}. You can only register one slot component with no predicates per slot.`,\n        );\n      }\n    }\n\n    let currentSlot = this._data.slots[slot];\n    if (!currentSlot) {\n      this._data.slots[slot] = {\n        slots: [],\n        data: {},\n      };\n      currentSlot = this._data.slots[slot];\n    }\n    if (!currentSlot.data[name]) {\n      currentSlot.data[name] = [];\n    }\n\n    const currentSlotComponents = currentSlot.data[name];\n    if (!currentSlot.slots.includes(name)) {\n      currentSlot.slots.push(name);\n    }\n    const slotComponentData = {\n      component,\n      predicates,\n    };\n\n    // Try to set a displayName (useful for React dev tools) for the registered component\n    // Only if it's a function and it's not set previously\n    try {\n      const displayName = slotComponentData.component.displayName;\n\n      if (!displayName && typeof slotComponentData?.component === 'function') {\n        slotComponentData.component.displayName = name;\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Not setting the slot component displayName because ${error}`,\n      );\n    }\n\n    currentSlotComponents.push(slotComponentData);\n  }\n\n  getSlotComponent(slot: string, name: string) {\n    const currentSlot = this._data.slots[slot];\n    if (!slot || !currentSlot) {\n      throw new Error(`No slot ${slot} found`);\n    }\n    const currentSlotComponents = currentSlot.data[name];\n    if (!currentSlotComponents) {\n      throw new Error(`No slot component ${name} in slot ${slot} found`);\n    }\n    return currentSlotComponents;\n  }\n\n  getSlotComponents(slot: string) {\n    const currentSlot = this._data.slots[slot];\n    if (!slot || !currentSlot) {\n      throw new Error(`No slot ${slot} found`);\n    }\n    return currentSlot.slots;\n  }\n\n  reorderSlotComponent({\n    slot,\n    name,\n    position,\n    action,\n    target,\n  }: {\n    slot: string;\n    name: string;\n    position?: number;\n    action?: 'after' | 'before' | 'first' | 'last';\n    target?: string;\n  }) {\n    if (!position && !action) {\n      throw new Error(`At least a position or action is required as argument`);\n    }\n    if (position && action) {\n      throw new Error(\n        `You should provide only one of position or action as arguments`,\n      );\n    }\n    if ((action == 'after' || action == 'before') && !target) {\n      throw new Error(\n        `No action target set. You should provide the name of a slot component as target when action is 'after' or 'before'.`,\n      );\n    }\n\n    const currentSlot = this._data.slots[slot];\n    if (!slot || !currentSlot) {\n      throw new Error(`No slot ${slot} found`);\n    }\n    const origin = currentSlot.slots.indexOf(name);\n    const result = Array.from(currentSlot.slots);\n    const [removed] = result.splice(origin, 1);\n\n    if (action) {\n      let targetIdx = 0;\n      if (target) {\n        targetIdx = currentSlot.slots.indexOf(target);\n      }\n      switch (action) {\n        case 'after':\n          if (targetIdx < origin) {\n            result.splice(targetIdx + 1, 0, removed);\n            break;\n          } else {\n            result.splice(targetIdx, 0, removed);\n            break;\n          }\n        case 'before':\n          if (targetIdx > origin) {\n            result.splice(targetIdx - 1, 0, removed);\n            break;\n          } else {\n            result.splice(targetIdx, 0, removed);\n            break;\n          }\n        case 'last':\n          result.push(removed);\n          break;\n        case 'first':\n          result.unshift(removed);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    if (position) {\n      result.splice(position, 0, removed);\n    }\n\n    currentSlot.slots = result;\n  }\n\n  unRegisterSlotComponent(slot: string, name: string, position: number) {\n    const currentSlot = this._data.slots[slot];\n    if (!slot || !currentSlot) {\n      throw new Error(`No slot ${slot} found`);\n    }\n    const currentSlotComponents = currentSlot.data[name];\n    if (!currentSlotComponents) {\n      throw new Error(`No slot component ${name} in slot ${slot} found`);\n    }\n    const result = currentSlotComponents.slice();\n    currentSlot.data[name] = result.splice(position, 1);\n  }\n\n  registerUtility(options: {\n    name: string;\n    type: string;\n    dependencies?: Record<string, string>;\n    method: (args: any) => any;\n  }) {\n    const { name, type, method, dependencies = {} } = options;\n    let depsString: string = '';\n    if (!method) {\n      throw new Error('No method provided');\n    } else {\n      depsString = Object.keys(dependencies)\n        .sort()\n        .map((key) => `${key}:${dependencies[key]}`)\n        .join('+');\n    }\n    const utilityName = `${depsString ? `|${depsString}` : ''}${name}`;\n\n    let utilityType = this._data.utilities[type];\n    if (!utilityType) {\n      this._data.utilities[type] = {};\n      utilityType = this._data.utilities[type];\n    }\n    utilityType[utilityName] = { method };\n  }\n\n  getUtility(options: {\n    name: string;\n    type: string;\n    dependencies?: Record<string, string>;\n  }): GetUtilityResult {\n    const { name, type, dependencies = {} } = options;\n    let depsString: string = '';\n    depsString = Object.keys(dependencies)\n      .map((key) => `${key}:${dependencies[key]}`)\n      .join('+');\n\n    const utilityName = `${depsString ? `|${depsString}` : ''}${name}`;\n\n    return this._data.utilities[type][utilityName] || {};\n  }\n\n  getUtilities(options: {\n    type: string;\n    dependencies?: Record<string, string>;\n  }): Array<GetUtilityResult> {\n    const { type, dependencies = {} } = options;\n    let depsString: string = '';\n    depsString = Object.keys(dependencies)\n      .map((key) => `${key}:${dependencies[key]}`)\n      .join('+');\n\n    const utilityName = `${depsString ? `|${depsString}` : ''}`;\n    const utilitiesKeys = Object.keys(this._data.utilities[type]).filter(\n      (key) => key.startsWith(utilityName),\n    );\n    const utilities = utilitiesKeys.map(\n      (key) => this._data.utilities[type][key],\n    );\n\n    return utilities;\n  }\n}\n\nconst instance = new Config();\nObject.freeze(instance);\n\nexport default instance;\n"],"names":["$149c1bd638913645$var$Config","constructor","instance","this","_data","set","registry","item","get","settings","experimental","blocks","views","widgets","addonReducers","addonRoutes","slots","components","utilities","getComponent","options","name","dependencies","depsString","Array","isArray","join","componentName","registerComponent","component","Error","displayName","error","console","warn","getSlot","args","data","slotComponents","slotName","noPredicateComponent","reversedSlotComponents","slice","reverse","slotComponent","isPredicateTrueFound","predicates","every","predicate","push","undefined","registerSlotComponent","slot","hasRegisteredNoPredicatesComponent","find","_ref","currentSlot","currentSlotComponents","includes","slotComponentData","getSlotComponent","getSlotComponents","reorderSlotComponent","_ref2","position","action","target","origin","indexOf","result","from","removed","splice","targetIdx","unshift","unRegisterSlotComponent","registerUtility","type","method","Object","keys","sort","map","key","utilityName","utilityType","getUtility","getUtilities","filter","startsWith","$149c1bd638913645$var$instance","freeze","$149c1bd638913645$export$2e2bcd8739ae039"],"sourceRoot":""}