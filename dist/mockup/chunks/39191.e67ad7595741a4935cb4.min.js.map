{"version":3,"file":"chunks/39191.e67ad7595741a4935cb4.min.js","mappings":"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","sources":["webpack://@plone/mockup/./src/pat/contentbrowser/src/ContentBrowser.svelte","webpack://@plone/mockup/./src/pat/contentbrowser/src/SelectedItems.svelte","webpack://@plone/mockup/./src/pat/contentbrowser/src/utils.js","webpack://@plone/mockup/./src/pat/contentbrowser/src/ContentStore.js","webpack://@plone/mockup/./src/pat/contentbrowser/src/ContentBrowser.svelte?b874","webpack://@plone/mockup/ContentBrowser.svelte","webpack://@plone/mockup/./src/pat/contentbrowser/src/SelectedItems.svelte?e8bf","webpack://@plone/mockup/SelectedItems.svelte","webpack://@plone/mockup/./src/pat/contentbrowser/src/stores.js","webpack://@plone/mockup/App.svelte"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".content-browser-position-wrapper.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{position:fixed;top:0;right:0;display:flex;justify-content:end;z-index:1500;width:100%;height:100vh;background-color:rgba(0,0,0,.25)}.btn-xs.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{--bs-btn-padding-y:0.15rem;--bs-btn-padding-x:0.5rem;--bs-btn-font-size:0.75rem}.content-browser.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{height:100vh;min-width:550px;background-color:var(--bs-light-bg-subtle);border-left:var(--bs-border-style) var(--bs-border-width) #fff;z-index:1500;display:flex;flex-direction:column}.toolBar.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{background-color:var(--bs-primary);padding:.325rem .75rem;color:var(--bs-light);width:100%;display:flex;justify-content:space-between}.toolBar.svelte-1nidsbj>.upload.svelte-1nidsbj.svelte-1nidsbj{margin:0 1rem 0 auto}.toolBar.svelte-1nidsbj svg{vertical-align:-0.125em}.levelColumns.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{display:flex;flex-wrap:nowrap;width:100%;overflow:hidden;flex-grow:3;border-left:var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);user-select:none}.levelColumn.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{width:320px;border-right:var(--bs-border-style) var(--bs-border-width) var(--bs-border-color);display:flex;flex-direction:column}.levelToolbar.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{width:100%;height:2.5rem;display:flex;justify-content:space-between;padding:.375rem;border-bottom:var(--bs-border-style) var(--bs-border-width) var(--bs-border-color)}.levelToolbar.svelte-1nidsbj>.levelActions.svelte-1nidsbj.svelte-1nidsbj{margin-left:auto}.levelItems.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{overflow-x:auto}.contentItem.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{display:flex;align-items:center;justify-content:space-between;font-size:90%;min-height:2rem}.contentItem.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj:focus-visible{outline:none}.contentItem.even.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{background-color:var(--bs-secondary-bg)}.contentItem.inPath.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj,.contentItem.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj:focus{background-color:rgba(var(--bs-primary-rgb), 0.15)}.contentItem.selectedItem.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{background-color:var(--bs-primary);color:var(--bs-body-bg)}.contentItem.svelte-1nidsbj>.svelte-1nidsbj.svelte-1nidsbj{padding:.5rem;white-space:nowrap;max-width:450px;text-overflow:ellipsis;overflow:hidden}.contentItem.svelte-1nidsbj>.browseSub.svelte-1nidsbj.svelte-1nidsbj{flex-shrink:0}.contentItem.svelte-1nidsbj .grid-preview.svelte-1nidsbj>img.svelte-1nidsbj{width:95px;height:95px;object-fit:cover;float:left;margin-right:1rem}.preview.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{width:320px;min-height:300px;display:flex;flex-direction:column;align-items:center}.preview.svelte-1nidsbj .info.svelte-1nidsbj.svelte-1nidsbj{padding:.5rem;width:100%;word-wrap:anywhere}.preview.svelte-1nidsbj .info .previewIcon.svelte-1nidsbj.svelte-1nidsbj{margin:0 auto 1rem auto}.preview.svelte-1nidsbj .info .previewIcon svg.svelte-1nidsbj.svelte-1nidsbj{width:50px !important;height:50px !important}.preview.svelte-1nidsbj h4.svelte-1nidsbj.svelte-1nidsbj{font-size:1.2 rem}.preview.svelte-1nidsbj img.svelte-1nidsbj.svelte-1nidsbj{max-width:100%;max-width:100%;margin-bottom:.5rem}.upload-wrapper.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{padding:1rem;width:590px;overflow-x:auto}.loadmore.svelte-1nidsbj.svelte-1nidsbj.svelte-1nidsbj{text-align:center;padding:.25rem 0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/pat/contentbrowser/src/ContentBrowser.svelte\"],\"names\":[],\"mappings\":\"AAAA,+EAAA,cAAA,CAAA,KAAA,CAAA,OAAA,CAAA,YAAA,CAAA,mBAAA,CAAA,YAAA,CAAA,UAAA,CAAA,YAAA,CAAA,gCAAA,CAAA,qDAAA,0BAAA,CAAA,yBAAA,CAAA,0BAAA,CAAA,8DAAA,YAAA,CAAA,eAAA,CAAA,0CAAA,CAAA,8DAAA,CAAA,YAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,sDAAA,kCAAA,CAAA,sBAAA,CAAA,qBAAA,CAAA,UAAA,CAAA,YAAA,CAAA,6BAAA,CAAA,8DAAA,oBAAA,CAAA,4BAAA,uBAAA,CAAA,2DAAA,YAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,eAAA,CAAA,WAAA,CAAA,gFAAA,CAAA,gBAAA,CAAA,0DAAA,WAAA,CAAA,iFAAA,CACmC,YAAA,CAAA,qBAAA,CAAA,2DAAA,UAAA,CAAA,aAAA,CAAA,YAAA,CAAA,6BAAA,CAAA,eAAA,CAAA,kFAAA,CACA,yEAAA,gBAAA,CAAA,yDAAA,eAAA,CAAA,0DAAA,YAAA,CAAA,kBAAA,CAAA,6BAAA,CAAA,aAAA,CAAA,eAAA,CAAA,wEAAA,YAAA,CAAA,+DAAA,uCAAA,CAAA,iIAAA,kDAAA,CAAA,uEAAA,kCAAA,CAAA,uBAAA,CAAA,2DAAA,aAAA,CAAA,kBAAA,CAAA,eAAA,CAAA,sBAAA,CAAA,eAAA,CAAA,qEAAA,aAAA,CAAA,4EAAA,UAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,UAAA,CAAA,iBAAA,CAAA,sDAAA,WAAA,CAAA,gBAAA,CAAA,YAAA,CAAA,qBAAA,CAAA,kBAAA,CAAA,4DAAA,aAAA,CAAA,UAAA,CAAA,kBAAA,CAAA,yEAAA,uBAAA,CAAA,6EAAA,qBAAA,CAAA,sBAAA,CAAA,yDAAA,iBAAA,CAAA,0DAAA,cAAA,CAAA,cAAA,CAAA,mBAAA,CAAA,6DAAA,YAAA,CAAA,WAAA,CAAA,eAAA,CAAA,uDAAA,iBAAA,CAAA,gBAAA\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".content-browser-selected-items-wrapper.svelte-bljrxf.svelte-bljrxf.svelte-bljrxf{display:flex;align-items:start}.content-browser-selected-items.svelte-bljrxf.svelte-bljrxf.svelte-bljrxf{list-style:none;background-color:var(--bs-body-bg);border-radius:var(--bs-border-radius) 0 0 var(--bs-border-radius);border:var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);min-height:2.4rem;padding:.5rem .5rem 0 .5rem;flex:1 1 auto}.content-browser-selected-items.svelte-bljrxf .selected-item.svelte-bljrxf.svelte-bljrxf{border-radius:var(--bs-border-radius);background-color:var(--bs-tertiary-bg);border:var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);padding:.5rem;margin-bottom:.5rem;display:flex;flex-wrap:nowrap;align-items:start;justify-content:space-between;cursor:move}.content-browser-selected-items.svelte-bljrxf .selected-item.svelte-bljrxf>.svelte-bljrxf{margin-right:.5rem;display:block}.content-browser-selected-items.svelte-bljrxf .selected-item button.svelte-bljrxf.svelte-bljrxf{cursor:pointer;padding:0 .375rem .374rem 0}.content-browser-selected-items.svelte-bljrxf .selected-item .item-info.svelte-bljrxf.svelte-bljrxf{display:flex;align-items:start}.content-browser-selected-items.svelte-bljrxf .selected-item.svelte-bljrxf>img.svelte-bljrxf{object-fit:cover;width:95px;height:95px}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/pat/contentbrowser/src/SelectedItems.svelte\"],\"names\":[],\"mappings\":\"AAAA,kFAAA,YAAA,CAAA,iBAAA,CAAA,0EAAA,eAAA,CAAA,kCAAA,CAAA,iEAAA,CAAA,2EAAA,CAAA,iBAAA,CAAA,2BAAA,CAAA,aAAA,CAAA,yFAAA,qCAAA,CAAA,sCAAA,CAAA,2EAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,YAAA,CAAA,gBAAA,CAAA,iBAAA,CAAA,6BAAA,CAAA,WAAA,CAAA,0FAAA,kBAAA,CAAA,aAAA,CAAA,gGAAA,cAAA,CAAA,2BAAA,CAAA,oGAAA,YAAA,CAAA,iBAAA,CAAA,6FAAA,gBAAA,CAAA,UAAA,CAAA,WAAA\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import utils from \"../../../core/utils.js\";\n\nexport async function request({\n    method = \"GET\",\n    vocabularyUrl = null,\n    attributes = [],\n    path = null,\n    uids = null,\n    searchTerm = null,\n    searchPath = null,\n    levelInfoPath = null,\n    selectableTypes = [],\n    pageSize = 100,\n    page = 1,\n}) {\n    let vocabQuery = {\n        criteria: [],\n    };\n    if (path) {\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"path\",\n                    o: \"plone.app.querystring.operation.string.path\",\n                    v: `${path}::1`,\n                },\n            ],\n            sort_on: \"getObjPositionInParent\",\n            sort_order: \"ascending\",\n        };\n    }\n    if (levelInfoPath) {\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"path\",\n                    o: \"plone.app.querystring.operation.string.path\",\n                    v: `${levelInfoPath}::0`,\n                },\n            ],\n        };\n    }\n    if (searchPath) {\n        // search from searchPath down\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"path\",\n                    o: \"plone.app.querystring.operation.string.path\",\n                    v: searchPath,\n                },\n            ],\n        };\n        if(selectableTypes) {\n            vocabQuery.criteria.push({\n                i: \"portal_type\",\n                o: \"plone.app.querystring.operation.list.contains\",\n                v: selectableTypes,\n            })\n        }\n    }\n    if (uids) {\n        vocabQuery = {\n            criteria: [\n                {\n                    i: \"UID\",\n                    o: \"plone.app.querystring.operation.list.contains\",\n                    v: uids,\n                },\n            ],\n        };\n    }\n    if (searchTerm) {\n        vocabQuery.criteria.push({\n            i: \"SearchableText\",\n            o: \"plone.app.querystring.operation.string.contains\",\n            v: `${searchTerm}`,\n\n        })\n    }\n\n    if(!vocabQuery.criteria.length) {\n        return {\n            results: [],\n            total: 0,\n        }\n    };\n    console.log(vocabQuery);\n    let url = `${vocabularyUrl}&query=${JSON.stringify(\n        vocabQuery\n    )}&attributes=${JSON.stringify(attributes)}&batch=${JSON.stringify({\n        page: page,\n        size: pageSize,\n    })}`;\n\n    let headers = new Headers();\n    headers.set(\"Accept\", \"application/json\");\n\n    const response = await fetch(url, {\n        method: method,\n        headers: headers,\n    });\n    const json = await response.json();\n\n    if (response.ok) {\n        if (!searchPath && !levelInfoPath && selectableTypes.length) {\n            // we iter through response and filter out non-selectable\n            // types but keep folderish types to maintain browsing\n            // the content structure.\n            const filtered_response = {\n                results: [],\n                total: json.total,\n            }\n            for (const it of json.results) {\n                if (selectableTypes.indexOf(it.portal_type) != -1 || it.is_folderish) {\n                    filtered_response.results.push(it);\n                }\n            }\n            return filtered_response;\n        }\n        return json;\n    } else {\n        return {\n            results: [],\n            total: 0,\n            errors: json.errors,\n        };\n    }\n}\n\nexport async function get_items_from_uids(uids, config) {\n    if (!uids) {\n        return [];\n    }\n    const selectedItemsFromUids = await request({\n        vocabularyUrl: config.vocabularyUrl,\n        attributes: config.attributes,\n        uids: uids,\n    });\n    let results = (await selectedItemsFromUids?.results) || [];\n    // resort the results based on the order of uids\n    results.sort((a, b) => {\n        return uids.indexOf(a.UID) - uids.indexOf(b.UID);\n    })\n    return results;\n}\n\n\n/** use Plone resolveIcon to load a SVG icon and replace node with icon code */\nexport async function resolveIcon(node, { iconName }) {\n\n    async function getIcon(iconName) {\n        const icon = await utils.resolveIcon(iconName)\n        return icon;\n    }\n    const iconCode = await getIcon(iconName);\n    node.outerHTML = iconCode;\n    return {\n        destroy() {},\n    };\n}\n\n/** Dispatch event on click outside of node */\nexport function clickOutside(node) {\n    const handleClick = (event) => {\n        if (node && !node.contains(event.target)) {\n            node.dispatchEvent(new CustomEvent(\"click_outside\", node));\n        }\n    };\n\n    document.addEventListener(\"click\", handleClick, true);\n\n    return {\n        destroy() {\n            document.removeEventListener(\"click\", handleClick, true);\n        },\n    };\n}\n","import { writable, get } from \"svelte/store\";\nimport { request } from \"./utils.js\";\n\nexport default function (config, pathCache) {\n    const store = writable([]);\n\n    const load = async (query) => {\n        let defaults = {\n            vocabularyUrl: config.vocabularyUrl,\n            attributes: config.attributes,\n            pageSize: config.pageSize,\n        };\n        query = {\n            ...defaults,\n            ...query,\n        }\n        if (config.selectableTypes.length) {\n            query[\"selectableTypes\"] = config.selectableTypes;\n        }\n        return await request(query);\n    }\n\n    const browse = async (portalPath, path, searchTerm, updateCache) => {\n        let paths = [];\n        let parts = path.split(\"/\") || [];\n        const depth = parts.length >= config.maxDepth ? config.maxDepth : parts.length;\n\n        let partsToShow = parts.slice(parts.length - depth, parts.length);\n        let partsToHide = parts.slice(0, parts.length - depth);\n        const pathPrefix = portalPath + partsToHide.join(\"/\");\n        const pC = get(pathCache);\n\n        while (partsToShow.length > 0) {\n            let sub_path = partsToShow.join(\"/\").replace(/^\\//, \"\");\n            const poped = partsToShow.pop();\n            sub_path = pathPrefix + ((poped != \"\") ? `/${sub_path}` : \"\");\n            if (paths.indexOf(sub_path) === -1) paths.push(sub_path);\n        }\n\n        let levels = [];\n        let pathCounter = 0;\n\n        for (var p of paths) {\n            pathCounter++;\n            const isFirstPath = pathCounter == 1;\n            let level = {};\n            if (\n                !(p in pC) ||  // new path not found in cache\n                (isFirstPath && searchTerm) ||  // filtering the level\n                updateCache  // manual cache update request\n            ) {\n                let query = {\n                    path: p,\n                };\n\n                if (isFirstPath && searchTerm) {\n                    query[\"searchTerm\"] = \"*\" + searchTerm + \"*\";\n                }\n\n                level = await load(query);\n\n                // check if there is more than the current batch\n                level.more = config.pageSize < level.total;\n                // save possible search filter for later batch loading\n                level.searchTerm = searchTerm;\n                level.page = 1;\n                level.path = p;\n                level.absPath = p.replace(portalPath, \"\");\n\n                // do not update cache when searching\n                if (!searchTerm) {\n                    const levelInfo = await load({\n                        levelInfoPath: p,\n                    });\n                    if (levelInfo.total) {\n                        level.UID = levelInfo.results[0].UID;\n                        level.Title = levelInfo.results[0].Title;\n                        // check if level is selectable (config.selectableTypes)\n                        level.selectable = (!config.selectableTypes.length || config.selectableTypes.indexOf(levelInfo.results[0].portal_type) != -1);\n                    }\n                    level.gridView = false;\n                    pathCache.update((n) => {\n                        n[p] = level;\n                        return n;\n                    });\n                }\n            } else {\n                level = pC[p];\n            }\n            levels = [level, ...levels];\n        }\n        store.set(levels);\n    }\n\n    const search = async (portalPath, searchTerm, page) => {\n        let query = {\n            searchPath: portalPath,\n            page: page,\n        };\n        if (searchTerm) {\n            query[\"searchTerm\"] = \"*\" + searchTerm + \"*\";\n        }\n        let level = await load(query);\n        level.page = page;\n        level.searchTerm = searchTerm;\n\n        store.update((levels) => {\n            const has_more = (page * config.pageSize) < level.total;\n\n            // first time or new search\n            if (levels.length == 0 || levels[0].searchTerm != searchTerm) {\n                level.more = has_more;\n                level.selectable = false;\n                level.gridView = false;\n                return [level,];\n            }\n\n            // has more ?\n            levels[0].more = has_more;\n            levels[0].page = level.page;\n\n            // append new batch\n            levels[0].results = [\n                ...levels[0].results,\n                ...level.results,\n            ];\n            return levels;\n        });\n    }\n\n    const nextBatch = async (p, page, searchTerm) => {\n        let query = {\n            path: p,\n            page: page,\n        };\n\n        if (searchTerm) {\n            query[\"searchTerm\"] = \"*\" + searchTerm + \"*\";\n        }\n\n        let level = await load(query);\n        level.more = (page * config.pageSize) < level.total;\n        level.page = page;\n\n        store.update((levels) => {\n            levels.forEach((l) => {\n                if (l.path != p) {\n                    return l;\n                }\n                l.page = level.page;\n                l.more = level.more;\n                l.results = [\n                    ...l.results,\n                    ...level.results,\n                ]\n            });\n            return levels;\n        });\n    }\n\n    store.get = async ({\n        path = \"\",\n        searchTerm = \"\",\n        updateCache = false,\n        loadMorePath = \"\",\n        page = 1,\n    }) => {\n        const base_url = new URL(config.base_url);\n        const portalPath = base_url.pathname;\n\n        if (config.mode === \"search\") {\n            await search(portalPath, searchTerm, page)\n        } else if (loadMorePath) {\n            const pC = get(pathCache);\n            if (!(loadMorePath in pC)) {\n                return;\n            }\n            let level = pC[loadMorePath];\n            if (page > level.page) {\n                await nextBatch(loadMorePath, page, level.searchTerm);\n            }\n        } else if (path) {\n            path = path.replace(new RegExp(`^${portalPath}`), \"\");\n            await browse(portalPath, path, searchTerm, updateCache);\n        }\n\n    };\n\n    return store;\n}\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"../../../../node_modules/@patternslib/dev/webpack/style-inserter.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!../../../../node_modules/svelte-loader/index.js?cssPath=/home/runner/work/mockup/mockup/src/pat/contentbrowser/src/ContentBrowser.svelte.0.css!./ContentBrowser.svelte\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn;\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!../../../../node_modules/svelte-loader/index.js?cssPath=/home/runner/work/mockup/mockup/src/pat/contentbrowser/src/ContentBrowser.svelte.0.css!./ContentBrowser.svelte\";\n       export default content && content.locals ? content.locals : undefined;\n","<script>\n    import utils from \"@patternslib/patternslib/src/core/utils\";\n    import { getContext } from \"svelte\";\n    import * as animateScroll from \"svelte-scrollto\";\n    import { fly } from \"svelte/transition\";\n    import _t from \"../../../core/i18n-wrapper\";\n    import Upload from \"../../upload/upload\";\n    import contentStore from \"./ContentStore\";\n    import { clickOutside, get_items_from_uids, resolveIcon } from \"./utils\";\n\n    animateScroll.setGlobalOptions({\n        scrollX: true,\n        container: \".levelColumns\",\n        duration: 500,\n    });\n\n    // get context stores\n    const currentPath = getContext(\"currentPath\");\n    const config = getContext(\"config\");\n    const pathCache = getContext(\"pathCache\");\n    const showContentBrowser = getContext(\"showContentBrowser\");\n    const selectedItems = getContext(\"selectedItems\");\n    const selectedUids = getContext(\"selectedUids\");\n    const previewUids = getContext(\"previewUids\");\n\n    // initialize content browser store\n    const contentItems = contentStore($config, pathCache);\n\n    let showUpload = false;\n    let previewItem = {};\n    let keyboardNavInitialized = false;\n    let shiftKey = false;\n\n    let vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);\n\n    function updatePreview({ data = null, uuid = null, action = \"show\" }) {\n        if (data && action == \"show\") {\n            previewItem = data;\n            $previewUids = [data.UID];\n        } else if (uuid && action == \"add\" && $previewUids.indexOf(uuid) === -1) {\n            if (\n                $config.maximumSelectionSize > 0 &&\n                $previewUids.length >= $config.maximumSelectionSize\n            ) {\n                // respect maximumSelectionSize\n                return;\n            }\n            $previewUids = [...$previewUids, uuid]; // NOTE: $previewUids.push() is not a reactive change\n        } else if (uuid && action == \"remove\" && $previewUids.indexOf(uuid) !== -1) {\n            previewUids.update((n) => {\n                n.splice(n.indexOf(uuid), 1);\n                return n;\n            });\n        } else if (action == \"clear\") {\n            previewItem = {};\n            $previewUids = [];\n        }\n    }\n\n    async function upload() {\n        updatePreview({ action: \"clear\" });\n        showUpload = true;\n        await utils.timeout(1);\n        const uploadEl = document.querySelector(\".upload-wrapper\");\n        uploadEl.classList.add(\"pat-upload\");\n        const patUpload = new Upload(uploadEl, {\n            baseUrl: $config.base_url,\n            currentPath: $currentPath,\n            relativePath: \"@@fileUpload\",\n            allowPathSelection: false,\n            hiddenInputContainer: \".upload-wrapper\",\n            success: (fileUpload, obj) => {\n                contentItems.get({ path: $currentPath, updateCache: true });\n            },\n        });\n    }\n\n    function showPreview(item) {\n        if ($config.mode == \"search\") {\n            // one level search mode\n            updatePreview({ data: item });\n        } else if (item.is_folderish) {\n            currentPath.set(item.path);\n        } else {\n            const pathParts = item.path.split(\"/\");\n            const folderPath = pathParts.slice(0, pathParts.length - 1).join(\"/\");\n            currentPath.set(folderPath || \"/\");\n            updatePreview({ data: item });\n        }\n        scrollToRight();\n    }\n\n    function changePath(item, e) {\n        showUpload = false;\n\n        // clear previous selection\n        updatePreview({ action: \"clear\" });\n\n        if (item === \"/\") {\n            // clicked \"home\" button\n            currentPath.set(item);\n            return;\n        }\n\n        // show clicked item\n        showPreview(item);\n    }\n\n    function clickItem(item, e) {\n        if (!keyboardNavInitialized) {\n            // if we've already clicked an element with the mouse\n            // do not start over keyboardnav\n            keyboardNavInitialized = true;\n        }\n\n        // check for multiselection\n        const levelWrapper = e.currentTarget.closest(\".levelItems\");\n        const prevSelection = levelWrapper.querySelectorAll(\".selectedItem\");\n\n        if (prevSelection.length) {\n            // check for pressed shift or ctrl/meta key for multiselection\n\n            if (shiftKey || e?.shiftKey) {\n                // iter through the wrapper children and select all\n                // inbetween current selection and last preview\n                let select = false;\n                for (const el of levelWrapper.children) {\n                    if ([item.UID, previewItem.UID].indexOf(el.dataset.uuid) !== -1) {\n                        if (select) {\n                            // stop selecting but make sure the last item is selected too\n                            updatePreview({\n                                uuid: el.dataset.uuid,\n                                action: \"add\",\n                            });\n                            select = false;\n                            continue;\n                        }\n                        // start selecting\n                        select = true;\n                    }\n                    updatePreview({\n                        uuid: el.dataset.uuid,\n                        action: select ? \"add\" : \"remove\",\n                    });\n                }\n            } else if (e?.metaKey || e?.ctrlKey) {\n                // de/select multiple single items\n                // NOTE: only for mouse click event\n                updatePreview({\n                    uuid: item.UID,\n                    action: $previewUids.indexOf(item.UID) == -1 ? \"add\" : \"remove\",\n                });\n            } else {\n                // unselect\n                [...prevSelection].map((el) => el.classList.remove(\"selectedItem\"));\n                changePath(item, e);\n            }\n\n        } else {\n            changePath(item, e);\n        }\n\n        e.currentTarget.focus();  // needed for keyboard navigation\n        e.currentTarget.classList.add(\"selectedItem\");\n    }\n\n    function initKeyboardNav() {\n        // focus first element when showing contentbrowser\n        if (keyboardNavInitialized) {\n            return;\n        }\n        const possibleFocusEls = [\n            ...document.querySelectorAll(\".levelColumn .inPath\"),  // previously selected folder\n            ...document.querySelectorAll(\".levelColumn .selectedItem\"),  // previously selected item\n            document.querySelector(\".levelColumn .contentItem\"),  // default first item\n        ]\n        if (possibleFocusEls.length) {\n            keyboardNavInitialized = true;\n            possibleFocusEls[0].focus();\n        }\n    }\n\n    function keyboardNavigation(item, e) {\n        const node = e.currentTarget;\n        shiftKey = e.shiftKey;\n        if (e.key == \"Escape\") {\n            cancelSelection();\n        }\n        if (\n            e.key == \"ArrowDown\" &&\n            node?.nextElementSibling?.classList.contains(\"contentItem\")\n        ) {\n            node.nextElementSibling.click();\n        }\n        if (\n            e.key == \"ArrowUp\" &&\n            node?.previousElementSibling?.classList.contains(\"contentItem\")\n        ) {\n            node.previousElementSibling.click();\n        }\n        if (e.key == \"ArrowRight\") {\n            const currCol = e.target.closest(\".levelColumn\");\n            const nxtCol = currCol?.nextElementSibling;\n            if (!nxtCol || !nxtCol.classList.contains(\"levelColumn\")) {\n                return;\n            }\n            nxtCol.querySelector(\".contentItem\")?.click();\n        }\n        if (e.key == \"ArrowLeft\") {\n            const currCol = e.target.closest(\".levelColumn\");\n            const prevCol = currCol?.previousElementSibling;\n            if (!prevCol || !prevCol.classList.contains(\"levelColumn\")) {\n                return;\n            }\n            prevCol.querySelector(\".inPath\").click();\n        }\n        if (e.key == \"Space\") {\n            // add item to selection (like metaKey + click)\n            clickItem(item, e, true);\n        }\n        if (e.key == \"Enter\") {\n            if (isSelectable(item)) {\n                addSelectedItems(item);\n            }\n        }\n    }\n\n    async function addItem(item) {\n        selectedItems.update((n) => [...n, item]);\n        selectedUids.update(() => $selectedItems.map((x) => x.UID));\n        updatePreview({ action: \"clear\" });\n        $showContentBrowser = false;\n        keyboardNavInitialized = false;\n    }\n\n    async function addSelectedItems() {\n        const previewItems = await get_items_from_uids($previewUids, $config);\n        selectedItems.update((n) => {\n            for (const it of previewItems) {\n                if ($selectedUids.indexOf(it.UID) != -1) continue;\n                n.push(it);\n            }\n            return n;\n        });\n        selectedUids.update(() => $selectedItems.map((x) => x.UID));\n        updatePreview({ action: \"clear\" });\n        $showContentBrowser = false;\n        keyboardNavInitialized = false;\n    }\n\n    function cancelSelection() {\n        $showContentBrowser = false;\n        keyboardNavInitialized = false;\n        updatePreview({ action: \"clear\" });\n    }\n\n    function isSelectable(item) {\n        return $selectedUids.indexOf(item.UID) === -1;\n    }\n\n    function scrollToRight() {\n        const scrollContainer = document.querySelector(\".levelColumns\");\n        if (scrollContainer) {\n            animateScroll.scrollTo({\n                // element: \".levelColumn:last-child\",\n                x: scrollContainer.scrollWidth + 100,\n            });\n        }\n    }\n\n    function itemInPath(item) {\n        return $currentPath.indexOf(item.path) != -1;\n    }\n\n    function filterItems() {\n        let timeoutId;\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        timeoutId = setTimeout(() => {\n            contentItems.get({ path: $currentPath, searchTerm: this.value });\n        }, 300);\n    }\n\n    function loadMore(node) {\n        const observer = new IntersectionObserver(\n            (entries) => {\n                for (const entry of entries) {\n                    if (entry.isIntersecting) {\n                        const path = node.dataset.levelPath;\n                        const page = parseInt(node.dataset.levelNextPage);\n                        contentItems.get({\n                            loadMorePath: path,\n                            page: page,\n                        });\n                    }\n                }\n            },\n            { threshold: 0, root: null, margin: \"0px\" },\n        );\n        // defer observing\n        window.setTimeout(() => {\n            observer.observe(node);\n        }, 500);\n    }\n\n    $: {\n        if ($showContentBrowser) {\n            contentItems.get({ path: $currentPath });\n        }\n    }\n\n    $: {\n        $contentItems;\n        scrollToRight();\n    }\n\n    $: {\n        $previewUids;\n    }\n</script>\n\n{#if $showContentBrowser}\n    <div class=\"content-browser-position-wrapper\">\n        <nav\n            class=\"content-browser\"\n            transition:fly={{ x: (vw / 100) * 94, opacity: 1 }}\n            on:introend={() => { scrollToRight(); initKeyboardNav() }}\n            use:clickOutside\n            on:click_outside={cancelSelection}\n        >\n            <div class=\"toolBar navbar\">\n                <div class=\"filter\">\n                    <input type=\"text\" name=\"filter\" on:input={filterItems} />\n                    <label for=\"filter\"\n                        ><svg use:resolveIcon={{ iconName: \"search\" }} /></label\n                    >\n                </div>\n                {#if $config.uploadEnabled}\n                    <button\n                        type=\"button\"\n                        class=\"upload btn btn-secondary btn-sm\"\n                        tabindex=\"0\"\n                        on:keydown={upload}\n                        on:click={upload}\n                        ><svg use:resolveIcon={{ iconName: \"upload\" }} />\n                        {_t(\"upload to ${current_path}\", {\n                            current_path: $currentPath,\n                        })}</button\n                    >\n                {/if}\n                <button\n                    class=\"btn btn-link text-white\"\n                    tabindex=\"0\"\n                    on:click|preventDefault={() => cancelSelection()}\n                    ><svg use:resolveIcon={{ iconName: \"x-circle\" }} /></button\n                >\n            </div>\n            {#await $contentItems}\n                <p>{_t(\"loading content items\")}</p>\n            {:then levels}\n                <div class=\"levelColumns\">\n                    {#each levels as level, i (level.path)}\n                        <div\n                            class=\"levelColumn{i % 2 == 0 ? ' odd' : ' even'}\"\n                            in:fly|local={{ duration: 300 }}\n                        >\n                            <div class=\"levelToolbar\">\n                                {#if i == 0}\n                                    <button\n                                        type=\"button\"\n                                        class=\"btn btn-link btn-xs ps-0\"\n                                        tabindex=\"0\"\n                                        on:keydown={() => changePath(\"/\")}\n                                        on:click={() => changePath(\"/\")}\n                                        ><svg\n                                            use:resolveIcon={{ iconName: \"house\" }}\n                                        /></button\n                                    >\n                                {/if}\n                                {#if level.selectable}\n                                    <button\n                                        class=\"btn btn-primary btn-xs\"\n                                        disabled={!isSelectable(level)}\n                                        on:click|preventDefault={() => addItem(level)}\n                                    >\n                                        {_t(\"select ${level_path}\", {\n                                            level_path: level.absPath || \"/\",\n                                        })}\n                                    </button>\n                                {/if}\n                                <div class=\"levelActions\">\n                                    {#if !level.gridView}\n                                        <button\n                                            class=\"btn btn-link btn-xs grid-view\"\n                                            on:click={() => (level.gridView = true)}\n                                        >\n                                            <svg\n                                                use:resolveIcon={{ iconName: \"grid\" }}\n                                            />\n                                        </button>\n                                    {:else}\n                                        <button\n                                            class=\"btn btn-link btn-xs grid-view\"\n                                            on:click={() => (level.gridView = false)}\n                                        >\n                                            <svg\n                                                use:resolveIcon={{ iconName: \"list\" }}\n                                            />\n                                        </button>\n                                    {/if}\n                                </div>\n                            </div>\n                            <div class=\"levelItems\">\n                                {#each level.results || [] as item, n}\n                                    <!-- svelte-ignore missing-declaration -->\n                                    <div\n                                        class=\"contentItem{n % 2 == 0\n                                            ? ' odd'\n                                            : ' even'}{itemInPath(item)\n                                            ? ' inPath'\n                                            : ''}{$previewUids.indexOf(item.UID) != -1\n                                            ? ' selectedItem'\n                                            : ''}{!isSelectable(item)\n                                            ? ' text-muted'\n                                            : ''}\"\n                                        role=\"button\"\n                                        tabindex={n}\n                                        data-uuid={item.UID}\n                                        on:keydown|preventDefault={(e) => keyboardNavigation(item, e)}\n                                        on:click={(e) => clickItem(item, e)}\n                                    >\n                                        {#if level.gridView}\n                                            <div class=\"grid-preview\">\n                                                {#if item.getIcon}\n                                                    <img\n                                                        src={`${item.getURL}/@@images/image/thumb`}\n                                                        alt={item.Title}\n                                                    />\n                                                {:else}\n                                                    <svg\n                                                        use:resolveIcon={{\n                                                            iconName: `contenttype/${item.portal_type.toLowerCase().replace(/\\.| /g, \"-\")}`,\n                                                        }}\n                                                    />\n                                                {/if}\n                                                {item.Title}\n                                            </div>\n                                        {:else}\n                                            <div\n                                                class=\"item-title\"\n                                                title=\"{item.portal_type}: {item.Title}\"\n                                            >\n                                                <svg\n                                                    use:resolveIcon={{\n                                                        iconName: `contenttype/${item.portal_type.toLowerCase().replace(/\\.| /g, \"-\")}`,\n                                                    }}\n                                                />\n                                                {item.Title}\n                                            </div>\n                                        {/if}\n                                        {#if item.is_folderish && $config.mode == \"browse\"}\n                                            <div class=\"browseSub\">\n                                                <svg\n                                                    use:resolveIcon={{\n                                                        iconName: \"arrow-right-circle\",\n                                                    }}\n                                                />\n                                            </div>\n                                        {/if}\n                                    </div>\n                                {/each}\n                                {#if level.more}\n                                    <div\n                                        class=\"loadmore\"\n                                        data-level-path={level.path}\n                                        data-level-next-page={parseInt(level.page) + 1}\n                                        use:loadMore\n                                    >\n                                        <div class=\"spinner-border\" role=\"status\"></div>\n                                    </div>\n                                {/if}\n                                {#if level.total == 0}\n                                    <div class=\"contentItem\">\n                                        <p>{_t(\"no results found\")}</p>\n                                    </div>\n                                {/if}\n                            </div>\n                        </div>\n                    {/each}\n                    {#if previewItem?.UID && $previewUids.length == 1}\n                        <div class=\"preview\">\n                            <div class=\"levelToolbar\">\n                                <button\n                                    class=\"btn btn-primary btn-xs\"\n                                    disabled={!isSelectable(previewItem)}\n                                    on:click|preventDefault={() => addItem(previewItem)}\n                                    >{_t(\"select ${preview_path}\", {\n                                        preview_path: previewItem.path.split(\"/\").pop(),\n                                    })}</button\n                                >\n                            </div>\n                            <div class=\"info\">\n                                {#if previewItem.getIcon}\n                                    <div class=\"previewImage\">\n                                        <img\n                                            src=\"{previewItem.getURL}/@@images/image/preview\"\n                                            alt={previewItem.Title}\n                                        />\n                                    </div>\n                                {:else}\n                                    <div class=\"previewIcon\">\n                                        <svg\n                                            use:resolveIcon={{\n                                                iconName: `contenttype/${previewItem.portal_type.toLowerCase().replace(/\\.| /g, \"-\")}`,\n                                            }}\n                                        />\n                                    </div>\n                                {/if}\n                                <h4>{previewItem.Title}</h4>\n                                <p>{previewItem.Description}</p>\n                            </div>\n                        </div>\n                    {/if}\n                    {#if $previewUids.length > 1}\n                        <div class=\"preview\">\n                            <div class=\"levelToolbar\">\n                                <button\n                                    class=\"btn btn-primary btn-xs\"\n                                    on:click|preventDefault={addSelectedItems}\n                                    >{_t(\"add selected items\")}</button\n                                >\n                            </div>\n                            <div class=\"info\">\n                                <svg\n                                    use:resolveIcon={{\n                                        iconName: \"files\",\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    {/if}\n                    {#if showUpload}\n                        <div class=\"upload-wrapper\"></div>\n                    {/if}\n                </div>\n            {:catch error}\n                <p style=\"color: red\">{error.message}</p>\n            {/await}\n        </nav>\n    </div>\n{/if}\n\n<style>\n    .content-browser-position-wrapper {\n        position: fixed;\n        top: 0;\n        right: 0;\n        display: flex;\n        justify-content: end;\n        z-index: 1500;\n        width: 100%;\n        height: 100vh;\n        background-color: rgba(0, 0, 0, 0.25);\n    }\n    .btn-xs {\n        --bs-btn-padding-y: 0.15rem;\n        --bs-btn-padding-x: 0.5rem;\n        --bs-btn-font-size: 0.75rem;\n    }\n    .content-browser {\n        height: 100vh;\n        min-width: 550px;\n        background-color: var(--bs-light-bg-subtle);\n        border-left: var(--bs-border-style) var(--bs-border-width) #fff;\n        z-index: 1500;\n        display: flex;\n        flex-direction: column;\n    }\n    .toolBar {\n        background-color: var(--bs-primary);\n        padding: 0.325rem 0.75rem;\n        color: var(--bs-light);\n        width: 100%;\n        display: flex;\n        justify-content: space-between;\n    }\n    .toolBar > .upload {\n        margin: 0 1rem 0 auto;\n    }\n    .toolBar :global(svg) {\n        vertical-align: -0.125em;\n    }\n    .levelColumns {\n        display: flex;\n        flex-wrap: nowrap;\n        width: 100%;\n        overflow: hidden;\n        flex-grow: 3;\n        border-left: var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);\n        user-select: none;\n    }\n\n    .levelColumn {\n        width: 320px;\n        border-right: var(--bs-border-style) var(--bs-border-width)\n            var(--bs-border-color);\n        display: flex;\n        flex-direction: column;\n    }\n\n    .levelToolbar {\n        width: 100%;\n        height: 2.5rem;\n        display: flex;\n        justify-content: space-between;\n        padding: 0.375rem;\n        border-bottom: var(--bs-border-style) var(--bs-border-width)\n            var(--bs-border-color);\n    }\n    .levelToolbar > .levelActions {\n        margin-left: auto;\n    }\n\n    .levelItems {\n        overflow-x: auto;\n    }\n    .contentItem {\n        /* padding: 1rem 1rem; */\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        font-size: 90%;\n        min-height: 2rem;\n    }\n    .contentItem:focus-visible {\n        outline:none;\n    }\n    .contentItem.even {\n        background-color: var(--bs-secondary-bg);\n    }\n    .contentItem.inPath,\n    .contentItem:focus {\n        background-color: rgba(var(--bs-primary-rgb), 0.15);\n    }\n    .contentItem.selectedItem {\n        background-color: var(--bs-primary);\n        color: var(--bs-body-bg);\n    }\n    .contentItem > * {\n        padding: 0.5rem;\n        white-space: nowrap;\n        max-width: 450px;\n        text-overflow: ellipsis;\n        overflow: hidden;\n    }\n    .contentItem > .browseSub {\n        flex-shrink: 0;\n    }\n\n    .contentItem .grid-preview > img {\n        width: 95px;\n        height: 95px;\n        object-fit: cover;\n        float: left;\n        margin-right: 1rem;\n    }\n    .preview {\n        width: 320px;\n        min-height: 300px;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n    .preview .info {\n        padding: 0.5rem;\n        width: 100%;\n        word-wrap: anywhere;\n    }\n    .preview .info .previewIcon {\n        margin: 0 auto 1rem auto;\n    }\n    .preview .info .previewIcon svg {\n        width: 50px !important;\n        height: 50px !important;\n    }\n    .preview h4 {\n        font-size: 1.2 rem;\n    }\n    .preview img {\n        max-width: 100%;\n        max-width: 100%;\n        margin-bottom: 0.5rem;\n    }\n\n    .upload-wrapper {\n        padding: 1rem;\n        width: 590px;\n        overflow-x: auto;\n    }\n    .loadmore {\n        text-align: center;\n        padding: 0.25rem 0;\n    }\n</style>\n","\n      import API from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"../../../../node_modules/@patternslib/dev/webpack/style-inserter.js\";\n      import setAttributes from \"!../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!../../../../node_modules/svelte-loader/index.js?cssPath=/home/runner/work/mockup/mockup/src/pat/contentbrowser/src/SelectedItems.svelte.1.css!./SelectedItems.svelte\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn;\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!../../../../node_modules/svelte-loader/index.js?cssPath=/home/runner/work/mockup/mockup/src/pat/contentbrowser/src/SelectedItems.svelte.1.css!./SelectedItems.svelte\";\n       export default content && content.locals ? content.locals : undefined;\n","<script>\n    import { getContext, onMount } from \"svelte\";\n    import { flip } from \"svelte/animate\";\n    import { get_items_from_uids, resolveIcon } from \"./utils.js\";\n    import Sortable from \"sortablejs\";\n    import _t from \"../../../core/i18n-wrapper\";\n\n    let ref;\n    let initializing = true;\n\n    // get reactive context config\n    const config = getContext(\"config\");\n    const fieldId = $config.fieldId;\n    const selectedItemsNode = document.getElementById(fieldId);\n\n    // get reactive context store\n    const selectedItems = getContext(\"selectedItems\");\n    const selectedUids = getContext(\"selectedUids\");\n\n    // showContentBrowser reactive state\n    const showContentBrowser = getContext(\"showContentBrowser\");\n\n    function event_dispatch(name, detail) {\n        const event = new CustomEvent(name, {\n            detail: {\n                content: detail,\n            },\n            bubbles: true,\n        });\n        document.dispatchEvent(event);\n    }\n\n    onMount(async () => {\n        await initializeSelectedItemsStore();\n        initializeSorting();\n        initializing = false;\n    });\n\n    function unselectItem(i) {\n        selectedItems.update((n) => {\n            n.splice(i, 1);\n            return n;\n        });\n        selectedUids.update(() => $selectedItems.map((x) => x.UID));\n    }\n\n    async function initializeSelectedItemsStore() {\n        const initialValue = $config.selection.length\n            ? $config.selection\n            : selectedItemsNode?.value\n              ? selectedItemsNode.value.split($config.separator)\n              : [];\n\n        if (!initialValue.length) {\n            return;\n        }\n\n        const selectedItemsUids = await get_items_from_uids(initialValue, $config);\n        $selectedItems = selectedItemsUids;\n        selectedUids.update(() => selectedItemsUids.map((x) => x.UID));\n    }\n\n    function initializeSorting() {\n        if ($config.maximumSelectionSize !== 1 && $selectedItems.length > 1) {\n            Sortable.create(\n                selectedItemsNode.previousSibling.querySelector(\n                    \".content-browser-selected-items\",\n                ),\n                {\n                    draggable: \".selected-item\",\n                    animation: 200,\n                    onUpdate: (e) => {\n                        let sortedUuids = [];\n                        for (const el of e.target.children) {\n                            sortedUuids.push(el.dataset[\"uuid\"]);\n                        }\n                        setNodeValue(sortedUuids);\n                    },\n                },\n            );\n        }\n    }\n\n    function selectedUidsFromSelectedItems() {\n        let items = [];\n        $selectedItems.forEach((item) => {\n            items.push(item.UID);\n        });\n        return items;\n    }\n\n    function setNodeValue(selectedUids) {\n        const node_val = selectedUids.join($config.separator);\n        selectedItemsNode.value = node_val;\n    }\n\n    $: {\n        $selectedItems;\n        if ($selectedItems.length || !initializing) {\n            setNodeValue(selectedUidsFromSelectedItems());\n            initializeSorting();\n            event_dispatch(\"updateSelection\", selectedUids);\n        }\n    }\n</script>\n\n<div class=\"content-browser-selected-items-wrapper\" bind:this={ref}>\n    <!-- {maxSelectionsize} -->\n    <div class=\"content-browser-selected-items\">\n        {#if $selectedItems}\n            {#each $selectedItems as selItem, i (selItem.UID)}\n                <div\n                    class=\"selected-item\"\n                    animate:flip={{ duration: 500 }}\n                    data-uuid={selItem.UID}\n                >\n                    <div class=\"item-info\">\n                        <!-- svelte-ignore a11y-missing-attribute -->\n                        <button\n                            class=\"btn btn-link btn-sm link-secondary\"\n                            on:click={() => unselectItem(i)}\n                            ><svg use:resolveIcon={{ iconName: \"x-circle\" }} /></button\n                        >\n                        <div>\n                            <span class=\"item-title\">{selItem.Title}</span><br />\n                            <span class=\"small\">{selItem.path}</span>\n                        </div>\n                    </div>\n                    {#if selItem.getURL && (selItem.getIcon || selItem.portal_type === \"Image\")}<img\n                            src=\"{selItem.getURL}/@@images/image/mini\"\n                            alt={selItem.Title}\n                        />{/if}\n                </div>\n            {/each}\n        {/if}\n        {#if !$selectedItems}\n            <p>{_t(\"loading selected items\")}</p>\n        {/if}\n    </div>\n    <button\n        class=\"btn btn-primary\"\n        style=\"border-radius:0 var(--bs-border-radius) var(--bs-border-radius) 0\"\n        disabled={$config.maximumSelectionSize > 0 &&\n            ($selectedItems.length || 0) >= $config.maximumSelectionSize}\n        on:click|preventDefault={() => ($showContentBrowser = true)}\n        >{_t(\"Select\")}</button\n    >\n</div>\n\n<style>\n    .content-browser-selected-items-wrapper {\n        display: flex;\n        align-items: start;\n    }\n    .content-browser-selected-items {\n        list-style: none;\n        background-color: var(--bs-body-bg);\n        border-radius: var(--bs-border-radius) 0 0 var(--bs-border-radius);\n        border: var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);\n        min-height: 2.4rem;\n        padding: 0.5rem 0.5rem 0 0.5rem;\n        flex: 1 1 auto;\n    }\n    .content-browser-selected-items .selected-item {\n        border-radius: var(--bs-border-radius);\n        background-color: var(--bs-tertiary-bg);\n        border: var(--bs-border-style) var(--bs-border-color) var(--bs-border-width);\n        padding: 0.5rem;\n        margin-bottom: 0.5rem;\n        display: flex;\n        flex-wrap: nowrap;\n        align-items: start;\n        justify-content: space-between;\n        cursor: move;\n    }\n    .content-browser-selected-items .selected-item > * {\n        margin-right: 0.5rem;\n        display: block;\n    }\n    .content-browser-selected-items .selected-item button {\n        cursor: pointer;\n        padding: 0 0.375rem 0.374rem 0;\n    }\n    .content-browser-selected-items .selected-item .item-info {\n        display: flex;\n        align-items: start;\n    }\n    .content-browser-selected-items .selected-item > img {\n        object-fit: cover;\n        width: 95px;\n        height: 95px;\n    }\n</style>\n","import { setContext } from 'svelte';\nimport { writable } from 'svelte/store';\n\nexport const gridView = writable(false);\n\nexport function setCurrentPath() {\n    let currentPath = writable('');\n    setContext('currentPath', currentPath);\n}\n\nexport function setPathCache() {\n    let pathCache = writable({});\n    setContext('pathCache', pathCache);\n}\n\n// reactive context stores\nexport function setSelectedItems() {\n    let selItems = writable([]);\n    setContext('selectedItems', selItems);\n}\n\nexport function setConfig() {\n    let config = writable({});\n    setContext('config', config);\n}\n\nexport function setShowContentBrowser() {\n    let showContentBrowser = writable(false);\n    setContext('showContentBrowser', showContentBrowser);\n}\n\nexport function setSelectedUids() {\n    let selUids = writable([]);\n    setContext(\"selectedUids\", selUids);\n}\n\nexport function setPreviewUids() {\n    let prevUids = writable([]);\n    setContext(\"previewUids\", prevUids);\n}\n","<script>\n    import logger from \"@patternslib/patternslib/src/core/logging\";\n    import { getContext } from \"svelte\";\n    import ContentBrowser from \"./ContentBrowser.svelte\";\n    import SelectedItems from \"./SelectedItems.svelte\";\n    import {\n        setConfig,\n        setCurrentPath,\n        setPathCache,\n        setSelectedItems,\n        setSelectedUids,\n        setPreviewUids,\n        setShowContentBrowser,\n    } from \"./stores\";\n\n    export let maxDepth;\n    export let attributes;\n    export let contextPath;\n    export let vocabularyUrl;\n    export let mode = \"browse\";\n    export let basePath = \"\";\n    export let selectableTypes = [];\n    export let maximumSelectionSize = -1;\n    export let separator;\n    export let selection = [];\n    export let query = {};\n    export let fieldId;\n    export let upload;\n    export let favorites;\n    export let recentlyUsed;\n    export let recentlyUsedKey;\n    export let bSize = 20;\n\n    const log = logger.getLogger(\"pat-contentbrowser\");\n\n    // initialize context stores\n    setCurrentPath();\n    setConfig();\n    setPathCache();\n    setSelectedItems();\n    setShowContentBrowser();\n    setSelectedUids();\n    setPreviewUids();\n\n    // initially set current path\n    const currentPath = getContext(\"currentPath\");\n\n    if (!$currentPath) {\n        $currentPath = basePath || \"/\";\n    }\n\n    // base_url information\n    const base_url = document.body.getAttribute(\"data-portal-url\");\n\n    let config = getContext(\"config\");\n    $config = {\n        mode: mode,\n        attributes: attributes,\n        contextPath: contextPath,\n        vocabularyUrl: vocabularyUrl,\n        maxDepth: maxDepth,\n        basePath: basePath,\n        selectableTypes: selectableTypes,\n        maximumSelectionSize: maximumSelectionSize,\n        separator: separator,\n        selection: selection,\n        query: query,\n        fieldId: fieldId,\n        uploadEnabled: upload,\n        favorites: favorites,\n        recentlyUsed: recentlyUsed,\n        recentlyUsedKey: recentlyUsedKey,\n        base_url: base_url,\n        pageSize: bSize,\n    };\n\n    log.debug(`Initialized App<${fieldId}> with config ${JSON.stringify($config)}`);\n</script>\n\n<ContentBrowser />\n<SelectedItems />\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","async","request","_ref","method","vocabularyUrl","attributes","path","uids","searchTerm","searchPath","levelInfoPath","selectableTypes","pageSize","page","vocabQuery","criteria","i","o","v","sort_on","sort_order","length","results","total","console","log","url","JSON","stringify","size","headers","Headers","set","response","fetch","json","ok","filtered_response","it","indexOf","portal_type","is_folderish","errors","get_items_from_uids","config","selectedItemsFromUids","sort","a","b","UID","resolveIcon","node","_ref2","iconName","iconCode","utils","getIcon","outerHTML","destroy","clickOutside","handleClick","event","contains","target","dispatchEvent","CustomEvent","document","addEventListener","removeEventListener","pathCache","store","writable","load","query","get","updateCache","loadMorePath","portalPath","URL","base_url","pathname","mode","level","update","levels","has_more","more","selectable","gridView","search","pC","p","forEach","l","nextBatch","replace","RegExp","paths","parts","split","depth","maxDepth","partsToShow","slice","pathPrefix","join","sub_path","pop","pathCounter","isFirstPath","absPath","levelInfo","Title","n","browse","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","uploadEnabled","x","opacity","current_path","message","level_path","toLowerCase","getURL","parseInt","duration","preview_path","Description","scrollX","container","currentPath","showContentBrowser","selectedItems","selectedUids","previewUids","contentItems","$config","showUpload","previewItem","keyboardNavInitialized","shiftKey","vw","Math","max","documentElement","clientWidth","window","innerWidth","updatePreview","data","uuid","action","$previewUids","maximumSelectionSize","splice","changePath","item","e","pathParts","folderPath","scrollToRight","showPreview","clickItem","levelWrapper","currentTarget","closest","prevSelection","querySelectorAll","select","el","children","dataset","metaKey","ctrlKey","map","classList","remove","focus","add","initKeyboardNav","possibleFocusEls","querySelector","keyboardNavigation","key","cancelSelection","nextElementSibling","click","previousElementSibling","currCol","nxtCol","prevCol","isSelectable","addSelectedItems","addItem","$selectedItems","$showContentBrowser","previewItems","$selectedUids","scrollContainer","scrollWidth","$currentPath","timeout","uploadEl","baseUrl","relativePath","allowPathSelection","hiddenInputContainer","success","fileUpload","obj","timeoutId","clearTimeout","setTimeout","this","value","observer","IntersectionObserver","entries","entry","isIntersecting","levelPath","levelNextPage","threshold","root","margin","observe","ref","initializing","fieldId","selectedItemsNode","getElementById","unselectItem","initializeSorting","previousSibling","draggable","animation","onUpdate","sortedUuids","setNodeValue","node_val","separator","initialValue","selection","selectedItemsUids","initializeSelectedItemsStore","items","selectedUidsFromSelectedItems","name","detail","content","bubbles","event_dispatch","contextPath","basePath","upload","favorites","recentlyUsed","recentlyUsedKey","bSize","getLogger","setContext","setCurrentPath","setConfig","setPathCache","selItems","setSelectedItems","setShowContentBrowser","selUids","setSelectedUids","prevUids","setPreviewUids","body","getAttribute","debug"],"sourceRoot":""}