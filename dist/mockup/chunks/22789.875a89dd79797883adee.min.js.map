{"version":3,"file":"chunks/22789.875a89dd79797883adee.min.js","mappings":"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","sources":["webpack://@plone/mockup/./src/pat/tinymce/js/links.js"],"sourcesContent":["import $ from \"jquery\";\nimport _ from \"underscore\";\nimport Base from \"@patternslib/patternslib/src/core/base\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport registry from \"@patternslib/patternslib/src/core/registry\";\n\nimport tinymce from \"tinymce/tinymce\";\nimport LinkTemplate from \"../templates/link.xml\";\nimport ImageTemplate from \"../templates/image.xml\";\nimport RelatedItems from \"../../relateditems/relateditems\";\nimport \"../../autotoc/autotoc\";\nimport \"../../modal/modal\";\nimport PatternUpload from \"../../upload/upload\";\n\nvar LinkType = Base.extend({\n    name: \"linktype\",\n    trigger: \".pat-linktype-dummy\",\n    defaults: {\n        linkModal: null, // required\n    },\n\n    init: function () {\n        this.linkModal = this.options.linkModal;\n        this.tinypattern = this.options.tinypattern;\n        this.tiny = this.tinypattern.tiny;\n        this.dom = this.tiny.dom;\n    },\n\n    getEl: function () {\n        return this.$el.find(\"input\");\n    },\n\n    value: function () {\n        return this.getEl().val().trim();\n    },\n\n    toUrl: function () {\n        return this.value();\n    },\n\n    load: function (element) {\n        let val = this.tiny.dom.getAttrib(element, \"data-val\");\n        this.getEl().attr(\"value\", val);\n    },\n\n    set: function (val) {\n        var $el = this.getEl();\n        $el.attr(\"value\", val);\n        $el.val(val);\n    },\n\n    attributes: function () {\n        return {\n            \"data-val\": this.value(),\n        };\n    },\n    updateRelatedItems: function () {},\n});\n\nvar ExternalLink = LinkType.extend({\n    name: \"externallinktype\",\n    trigger: \".pat-externallinktype-dummy\",\n    init: function () {\n        LinkType.prototype.init.call(this);\n        this.getEl().on(\"change\", function () {\n            // check here if we should automatically add in http:// to url\n            var val = $(this).val();\n            if (new RegExp(\"https?://\").test(val)) {\n                // already valid url\n                return;\n            }\n            var domain = $(this).val().split(\"/\")[0];\n            if (domain.indexOf(\".\") !== -1) {\n                $(this).val(\"http://\" + val);\n            }\n        });\n    },\n});\n\nvar InternalLink = LinkType.extend({\n    name: \"internallinktype\",\n    trigger: \".pat-internallinktype-dummy\",\n    init: async function () {\n        if (!this.getEl().length) {\n            return;\n        }\n        LinkType.prototype.init.call(this);\n        this.getEl().addClass(\"pat-relateditems\");\n        await this.createRelatedItems();\n    },\n\n    getEl: function () {\n        return this.$el.find(\"input:not(.select2-input)\");\n    },\n\n    createRelatedItems: async function () {\n        if (!this.getEl().length) {\n            return;\n        }\n        var options = this.linkModal.options.relatedItems;\n        options.upload = false; // ensure that related items upload is off.\n        this.relatedItems = new RelatedItems(this.getEl(), options);\n        await events.await_pattern_init(this.relatedItems)\n    },\n\n    updateRelatedItems: async function (val) {\n        if (!this.relatedItems) {\n            // prevent toolbar from being rendered twice\n            await this.createRelatedItems();\n        }\n        this.relatedItems.selectItem(val);\n    },\n\n    value: function () {\n        var val = this.getEl().select2(\"data\");\n        if (val && typeof val === \"object\") {\n            val = val[0];\n        }\n        return val;\n    },\n\n    toUrl: function () {\n        var value = this.value();\n        if (value) {\n            return this.tinypattern.generateUrl(value);\n        }\n        return null;\n    },\n    load: function (element) {\n        var val = this.tiny.dom.getAttrib(element, \"data-val\");\n        if (val) {\n            this.set(val);\n        }\n    },\n\n    set: function (val) {\n        var $el = this.getEl();\n        $el.val(val).trigger(\"change\");\n        this.updateRelatedItems(val);\n    },\n\n    attributes: function () {\n        var val = this.value();\n        if (val) {\n            return {\n                \"data-val\": val.UID,\n            };\n        }\n        return {};\n    },\n});\n\nvar UploadLink = LinkType.extend({\n    name: \"uploadlinktype\",\n    trigger: \".pat-uploadlinktype-dummy\",\n    /* need to do it a bit differently here.\n       when a user uploads and tries to upload from\n       it, you need to delegate to the real insert\n       linke types */\n    getDelegatedLinkType: function () {\n        if (this.linkModal.linkType === \"uploadImage\") {\n            return this.linkModal.linkTypes.image;\n        } else {\n            return this.linkModal.linkTypes.internal;\n        }\n    },\n    toUrl: function () {\n        return this.getDelegatedLinkType().toUrl();\n    },\n    attributes: function () {\n        return this.getDelegatedLinkType().attributes();\n    },\n    set: function (val) {\n        return this.getDelegatedLinkType().set(val);\n    },\n    load: function (element) {\n        return this.getDelegatedLinkType().load(element);\n    },\n    value: function () {\n        return this.getDelegatedLinkType().value();\n    },\n});\n\nvar ImageLink = InternalLink.extend({\n    name: \"imagelinktype\",\n    trigger: \".pat-imagelinktype-dummy\",\n    toUrl: function () {\n        var value = this.value();\n        return this.tinypattern.generateImageUrl(\n            value,\n            this.linkModal.getScaleFromSrcset(this.linkModal.$scale.val())\n        );\n    },\n});\n\nvar EmailLink = LinkType.extend({\n    name: \"emaillinktype\",\n    trigger: \".pat-emaillinktype-dummy\",\n    toUrl: function () {\n        var self = this;\n        var val = self.value();\n        if (val) {\n            var subject = self.getSubject();\n            var href = \"mailto:\" + val;\n            if (subject) {\n                href += \"?subject=\" + subject;\n            }\n            return href;\n        }\n        return null;\n    },\n\n    load: function (element) {\n        LinkType.prototype.load.apply(this, [element]);\n        this.linkModal.$subject.val(this.tiny.dom.getAttrib(element, \"data-subject\"));\n    },\n\n    getSubject: function () {\n        return this.linkModal.$subject.val();\n    },\n\n    attributes: function () {\n        var attribs = LinkType.prototype.attributes.call(this);\n        attribs[\"data-subject\"] = this.getSubject();\n        return attribs;\n    },\n});\n\nvar AnchorLink = LinkType.extend({\n    name: \"anchorlinktype\",\n    trigger: \".pat-anchorlinktype-dummy\",\n    init: function () {\n        LinkType.prototype.init.call(this);\n        this.$select = this.$el.find(\"select\");\n        this.anchorNodes = [];\n        this.anchorData = [];\n        this.populate();\n    },\n\n    value: function () {\n        var val = this.$select.select2(\"data\");\n        if (val && typeof val === \"object\") {\n            val = val.id;\n        }\n        return val;\n    },\n\n    populate: function () {\n        var self = this;\n        self.$select.find(\"option\").remove();\n        self.anchorNodes = [];\n        self.anchorData = [];\n        var node, i, j, name, title;\n\n        var nodes = self.tiny.dom.select(\".mceItemAnchor,.mce-item-anchor\");\n        for (i = 0; i < nodes.length; i = i + 1) {\n            node = nodes[i];\n            name = self.tiny.dom.getAttrib(node, \"name\");\n            if (!name) {\n                name = self.tiny.dom.getAttrib(node, \"id\");\n            }\n            if (name !== \"\") {\n                self.anchorNodes.push(node);\n                self.anchorData.push({ name: name, title: name });\n            }\n        }\n\n        nodes = self.tiny.dom.select(self.linkModal.options.anchorSelector);\n        if (nodes.length > 0) {\n            for (i = 0; i < nodes.length; i = i + 1) {\n                node = nodes[i];\n                title = $(node)\n                    .text()\n                    .replace(/^\\s+|\\s+$/g, \"\");\n                if (title === \"\") {\n                    continue;\n                }\n                name = title.toLowerCase().substring(0, 1024);\n                name = name.replace(/[^a-z0-9]/g, \"-\");\n                /* okay, ugly, but we need to first check that this anchor isn't already available */\n                var found = false;\n                for (j = 0; j < self.anchorNodes.length; j = j + 1) {\n                    var anode = self.anchorData[j];\n                    if (anode.name === name) {\n                        found = true;\n                        // so it's also found, let's update the title to be more presentable\n                        anode.title = title;\n                        break;\n                    }\n                }\n                if (!found) {\n                    self.anchorData.push({\n                        name: name,\n                        title: title,\n                        newAnchor: true,\n                    });\n                    self.anchorNodes.push(node);\n                }\n            }\n        }\n        if (self.anchorNodes.length > 0) {\n            for (i = 0; i < self.anchorData.length; i = i + 1) {\n                var data = self.anchorData[i];\n                self.$select.append(\n                    '<option value=\"' + i + '\">' + data.title + \"</option>\"\n                );\n            }\n        } else {\n            self.$select.append(\"<option>No anchors found..</option>\");\n        }\n    },\n\n    getIndex: function (name) {\n        for (var i = 0; i < this.anchorData.length; i = i + 1) {\n            var data = this.anchorData[i];\n            if (data.name === name) {\n                return i;\n            }\n        }\n        return 0;\n    },\n\n    toUrl: function () {\n        var val = this.value();\n        if (val) {\n            var index = parseInt(val, 10);\n            var node = this.anchorNodes[index];\n            var data = this.anchorData[index];\n            if (data.newAnchor) {\n                node.innerHTML =\n                    '<a name=\"' +\n                    data.name +\n                    '\" class=\"mce-item-anchor\"></a>' +\n                    node.innerHTML;\n            }\n            return \"#\" + data.name;\n        }\n        return null;\n    },\n\n    set: function (val) {\n        var anchor = this.getIndex(val);\n        this.$select.select2(\"data\", \"\" + anchor);\n    },\n});\n\nexport default Base.extend({\n    name: \"linkmodal\",\n    trigger: \".pat-linkmodal\",\n    defaults: {\n        anchorSelector: \"h1,h2,h3\",\n        linkTypes: [\n            /* available, none activate by default because these options\n         * only get merged, not set.\n        'internal',\n        'upload',\n        'external',\n        'email',\n        'anchor',\n        'image'\n        'externalImage'*/\n        ],\n        initialLinkType: \"internal\",\n        text: {\n            insertHeading: \"Insert Link\",\n        },\n        linkTypeClassMapping: {\n            internal: InternalLink,\n            upload: UploadLink,\n            external: ExternalLink,\n            email: EmailLink,\n            anchor: AnchorLink,\n            image: ImageLink,\n            uploadImage: UploadLink,\n            externalImage: LinkType,\n        },\n    },\n    // XXX: this is a temporary work around for having separated templates.\n    // Image modal is going to have its own modal class, funcs and template.\n    linkTypeTemplateMapping: {\n        internal: LinkTemplate,\n        upload: LinkTemplate,\n        external: LinkTemplate,\n        email: LinkTemplate,\n        anchor: LinkTemplate,\n        image: ImageTemplate,\n        uploadImage: ImageTemplate,\n        externalImage: ImageTemplate,\n    },\n\n    template: function (data) {\n        return _.template(this.linkTypeTemplateMapping[this.linkType])(data);\n    },\n\n    init: function () {\n        var self = this;\n        self.tinypattern = self.options.tinypattern;\n        if (self.tinypattern.options.anchorSelector) {\n            self.options.anchorSelector = self.tinypattern.options.anchorSelector;\n        }\n        self.tiny = self.tinypattern.tiny;\n        self.dom = self.tiny.dom;\n        self.linkType = self.options.initialLinkType;\n        self.linkTypes = {};\n        self.modal = registry.patterns[\"plone-modal\"].init(self.$el, {\n            html: self.generateModalHtml(),\n            content: null,\n            buttons: \".plone-btn\",\n            reloadWindowOnClose: false,\n            templateOptions: {\n                classDialog: \"modal-dialog modal-lg\",\n                reloadWindowOnClose: false,\n            },\n            actionOptions: { reloadWindowOnClose: false },\n            backdropOptions: {\n                zIndex: \"1340\",\n                closeOnClick: false,\n            },\n        });\n        self.modal.on(\"shown\", (e) => {\n            self.modalShown.apply(self, [e]);\n        });\n    },\n\n    isOnlyTextSelected: function () {\n        /* pulled from TinyMCE link plugin */\n        var html = this.tiny.selection.getContent();\n\n        // Partial html and not a fully selected anchor element\n        if (\n            /</.test(html) &&\n            (!/^<a [^>]+>[^<]+<\\/a>$/.test(html) || html.indexOf(\"href=\") === -1)\n        ) {\n            return false;\n        }\n\n        if (this.anchorElm) {\n            var nodes = this.anchorElm.childNodes;\n\n            if (nodes.length === 0) {\n                return false;\n            }\n\n            for (var ii = nodes.length - 1; ii >= 0; ii--) {\n                if (nodes[ii].nodeType !== 3) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    },\n\n    generateModalHtml: function () {\n        return this.template({\n            options: this.options,\n            upload: this.options.upload,\n            text: this.options.text,\n            insertHeading: this.options.text.insertHeading,\n            insertImageHelp: this.options.text.insertImageHelp,\n            uploadText: this.options.text.upload,\n            insertLinkHelp: this.options.text.insertLinkHelp,\n            internal: this.options.text.internal,\n            external: this.options.text.external,\n            anchor: this.options.text.anchor,\n            anchorLabel: this.options.text.anchorLabel,\n            target: this.options.text.target,\n            linkTypes: this.options.linkTypes,\n            externalText: this.options.text.externalText,\n            emailText: this.options.text.email,\n            subjectText: this.options.text.subject,\n            targetList: this.options.targetList,\n            titleText: this.options.text.title,\n            internalImageText: this.options.text.internalImage,\n            externalImage: this.options.text.externalImage,\n            externalImageText: this.options.text.externalImageText,\n            altText: this.options.text.alt,\n            imageAlignText: this.options.text.imageAlign,\n            captionFromDescriptionText: this.options.text.captionFromDescription,\n            enableImageZoom: this.options.text.enableImageZoom,\n            captionText: this.options.text.caption,\n            scaleText: this.options.text.scale,\n            pictureVariants: this.options.pictureVariants,\n            imageCaptioningEnabled: this.options.imageCaptioningEnabled,\n            cancelBtn: this.options.text.cancelBtn,\n            insertBtn: this.options.text.insertBtn,\n        });\n    },\n\n    isImageMode: function () {\n        return [\"image\", \"uploadImage\", \"externalImage\"].indexOf(this.linkType) !== -1;\n    },\n\n    initElements: async function () {\n        var self = this;\n        self.$target = $('select[name=\"target\"]', self.modal.$modal);\n        self.$button = $('.modal-footer input[name=\"insert\"]', self.modal.$modal);\n        self.$title = $('input[name=\"title\"]', self.modal.$modal);\n        self.$subject = $('input[name=\"subject\"]', self.modal.$modal);\n\n        self.$alt = $('input[name=\"alt\"]', self.modal.$modal);\n        self.$align = $('select[name=\"align\"]', self.modal.$modal);\n        self.$scale = $('select[name=\"scale\"]', self.modal.$modal);\n        self.$enableImageZoom = $('input[name=\"enableImageZoom\"]', self.modal.$modal);\n        self.$captionFromDescription = $(\n            'input[name=\"captionFromDescription\"]',\n            self.modal.$modal\n        );\n        self.$caption = $('textarea[name=\"caption\"]', self.modal.$modal);\n\n        /* load up all the link types */\n        for (var index = 0; index < self.options.linkTypes.length; index++) {\n            var type = self.options.linkTypes[index];\n            var $container = $(\".linkType.\" + type + \" .main\", self.modal.$modal);\n            if ($container.length) {\n                var instance  = new self.options.linkTypeClassMapping[type](\n                    $container,\n                    {\n                        linkModal: self,\n                        tinypattern: self.tinypattern,\n                    }\n                );\n                await events.await_pattern_init(instance);\n                self.linkTypes[type] = instance;\n            }\n        }\n\n        $(\".autotoc-nav a\", self.modal.$modal).on(\"click\", function () {\n            var $fieldset = $(\"fieldset.linkType\", self.modal.$modal).eq(\n                $(this).index()\n            );\n            var classes = $fieldset[0].className.split(/\\s+/);\n            _.each(classes, function (val) {\n                if (_.indexOf(self.options.linkTypes, val) !== -1) {\n                    self.linkType = val;\n                }\n            });\n        });\n\n        self.$captionFromDescription.on(\"change\", function () {\n            if (this.checked) {\n                self.$caption.prop(\"disabled\", true);\n            } else {\n                self.$caption.prop(\"disabled\", false);\n            }\n        });\n    },\n\n    getLinkUrl: function () {\n        // get the url, only get one uid\n        return this.linkTypes[this.linkType].toUrl();\n    },\n\n    getValue: function () {\n        return this.linkTypes[this.linkType].value();\n    },\n\n    updateAnchor: function (href) {\n        var self = this;\n\n        self.tiny.focus();\n        self.tiny.selection.setRng(self.rng);\n\n        var target = self.$target.val();\n        var title = self.$title.val();\n        var linkAttrs = $.extend(\n            true,\n            self.data,\n            {\n                \"title\": title ? title : null,\n                \"target\": target ? target : null,\n                \"data-linkType\": self.linkType,\n                \"href\": href,\n            },\n            self.linkTypes[self.linkType].attributes()\n        );\n        if (self.anchorElm) {\n            if (self.onlyText && linkAttrs.text !== self.initialText) {\n                if (\"innerText\" in self.anchorElm) {\n                    self.anchorElm.innerText = self.data.text;\n                } else {\n                    self.anchorElm.textContent = self.data.text;\n                }\n            }\n\n            self.tiny.dom.setAttribs(self.anchorElm, linkAttrs);\n\n            self.tiny.selection.select(self.anchorElm);\n            self.tiny.undoManager.add();\n        } else {\n            if (self.onlyText) {\n                self.tiny.insertContent(\n                    self.tiny.dom.createHTML(\n                        \"a\",\n                        linkAttrs,\n                        self.tiny.dom.encode(self.data.text)\n                    )\n                );\n            } else {\n                self.tiny.execCommand(\"mceInsertLink\", false, linkAttrs);\n            }\n        }\n    },\n\n    focusElement: function (elm) {\n        this.tiny.focus();\n        this.tiny.selection.select(elm);\n        this.tiny.nodeChanged();\n    },\n\n    getScaleFromSrcset: function (pictureVariant) {\n        let pictureVariantsConfig = this.options.pictureVariants[pictureVariant];\n        return pictureVariantsConfig.sourceset[\n            pictureVariantsConfig.sourceset.length - 1\n        ].scale;\n    },\n\n    updateImage: function (src) {\n        var self = this;\n        var title = self.$title.val();\n        var captionFromDescription = self.$captionFromDescription.prop(\"checked\");\n        var enableImageZoom = self.$enableImageZoom.prop(\"checked\");\n        var caption = self.$caption.val();\n\n        self.tiny.focus();\n        self.tiny.selection.setRng(self.rng);\n        var cssclasses = [\n            \"image-richtext\",\n            self.$align.val(),\n        ];\n        if(self.linkType !== \"externalImage\"){\n            cssclasses.push(\"picture-variant-\" + self.$scale.val())\n        }\n        if (captionFromDescription || caption) {\n            cssclasses.push(\"captioned\");\n        }\n        if (enableImageZoom) {\n            cssclasses.push(\"zoomable\");\n        }\n        var data = $.extend(\n            true,\n            {},\n            {\n                \"src\": src,\n                \"title\": title ? title : null,\n                \"alt\": self.$alt.val(),\n                \"class\": cssclasses.join(\" \"),\n                \"data-linkType\": self.linkType,\n                \"data-scale\": self.getScaleFromSrcset(self.$scale.val()),\n            },\n            self.linkTypes[self.linkType].attributes()\n        );\n        if(self.linkType !== \"externalImage\"){\n            data[\"data-picturevariant\"] = self.$scale.val();\n        }\n\n        if (caption && !captionFromDescription) {\n            data[\"data-captiontext\"] = caption;\n        }\n        if (self.imgElm && !self.imgElm.getAttribute(\"data-mce-object\")) {\n            const imgWidth = self.dom.getAttrib(self.imgElm, \"width\");\n            const imgHight = self.dom.getAttrib(self.imgElm, \"height\");\n            if (imgWidth) {\n                data.width = imgWidth;\n            }\n            if (imgHight) {\n                data.height = imgHight;\n            }\n        } else {\n            self.imgElm = null;\n        }\n\n        function waitLoad(imgElm) {\n            imgElm.onload = imgElm.onerror = function () {\n                imgElm.onload = imgElm.onerror = null;\n                self.focusElement(imgElm);\n            };\n        }\n\n        data.id = \"__mcenew\";\n        var html_inner = self.dom.createHTML(\"img\", data);\n        var html_string;\n        html_string = html_inner;\n        self.tiny.insertContent(html_string);\n        self.imgElm = self.dom.get(\"__mcenew\");\n        self.dom.setAttrib(self.imgElm, \"id\", null);\n\n        waitLoad(self.imgElm);\n        if (self.imgElm.complete) {\n            self.focusElement(self.imgElm);\n        }\n    },\n\n    // eslint-disable-next-line no-unused-vars\n    modalShown: async function (e) {\n        var self = this;\n        await self.initElements();\n        self.initData();\n        // upload init\n        if (self.options.upload) {\n            self.$upload = $(\".uploadify-me\", self.modal.$modal);\n            self.options.upload.relatedItems = $.extend(\n                true,\n                {},\n                self.options.relatedItems\n            );\n            self.options.upload.relatedItems.selectableTypes = self.options.folderTypes;\n            self.$upload.addClass(\"pat-upload\");\n            new PatternUpload(self.$upload, self.options.upload);\n            self.$upload.on(\n                \"uploadAllCompleted\",\n                function (evt, data) {\n                    if (self.linkTypes.image) {\n                        self.linkTypes.image.set(data.data.UID);\n                        $(\n                            \"#\" + $(\"#tinylink-image\", self.modal.$modal).data(\"navref\")\n                        ).trigger(\"click\");\n                    } else {\n                        self.linkTypes.internal.set(data.data.UID);\n                        $(\n                            \"#\" +\n                                $(\"#tinylink-internal\", self.modal.$modal).data(\"navref\")\n                        ).trigger(\"click\");\n                    }\n                }.bind(self)\n            );\n        }\n\n        self.$button.off(\"click\").on(\"click\", function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            self.linkType = self.modal.$modal.find(\"fieldset.active\").data(\"linktype\");\n\n            if (self.linkType === \"uploadImage\" || self.linkType === \"upload\") {\n                var patUpload = self.$upload.data().patternUpload;\n                if (patUpload.dropzone.files.length > 0) {\n                    patUpload.processUpload();\n                    // eslint-disable-next-line no-unused-vars\n                    self.$upload.on(\"uploadAllCompleted\", function (evt, data) {\n                        var counter = 0;\n                        var checkUpload = function () {\n                            if (counter < 5 && !self.linkTypes[self.linkType].value()) {\n                                counter += 1;\n                                setTimeout(checkUpload, 100);\n                                return;\n                            } else {\n                                var href = self.getLinkUrl();\n                                self.updateImage(href);\n                                self.hide();\n                            }\n                        };\n                        checkUpload();\n                    });\n                }\n            }\n            var href;\n            try {\n                href = self.getLinkUrl();\n            } catch (error) {\n                return; // just cut out if no url\n            }\n            if (!href) {\n                return; // just cut out if no url\n            }\n            if (self.isImageMode()) {\n                self.updateImage(href);\n            } else {\n                /* regular anchor */\n                self.updateAnchor(href);\n            }\n            self.hide();\n        });\n        $('.modal-footer input[name=\"cancel\"]', self.modal.$modal).on(\"click\", function (e) {\n            e.preventDefault();\n            self.hide();\n        });\n    },\n\n    show: function () {\n        this.modal.show();\n    },\n\n    hide: function () {\n        this.modal.hide();\n    },\n\n    initData: function () {\n        var self = this;\n\n        self.data = {};\n        // get selection BEFORE..\n        // This is pulled from TinyMCE link plugin\n        self.initialText = null;\n        var value;\n        self.rng = self.tiny.selection.getRng();\n        self.selectedElm = self.tiny.selection.getNode();\n        self.anchorElm = self.tiny.dom.getParent(self.selectedElm, \"a[href]\");\n        self.onlyText = self.isOnlyTextSelected();\n\n        self.data.text = self.initialText = self.anchorElm\n            ? self.anchorElm.innerText || self.anchorElm.textContent\n            : self.tiny.selection.getContent({ format: \"text\" });\n        self.data.href = self.anchorElm\n            ? self.tiny.dom.getAttrib(self.anchorElm, \"href\")\n            : \"\";\n\n        if (self.anchorElm) {\n            self.data.target = self.tiny.dom.getAttrib(self.anchorElm, \"target\");\n        } else if (self.tiny.options.get('link_default_target')) {\n            self.data.target = self.tiny.options.get('link_default_target');\n        }\n\n        if ((value = self.tiny.dom.getAttrib(self.anchorElm, \"rel\"))) {\n            self.data.rel = value;\n        }\n\n        if ((value = self.tiny.dom.getAttrib(self.anchorElm, \"class\"))) {\n            self.data[\"class\"] = value;\n        }\n\n        if ((value = self.tiny.dom.getAttrib(self.anchorElm, \"title\"))) {\n            self.data.title = value;\n        }\n\n        self.tiny.focus();\n        self.anchorElm = self.dom.getParent(self.selectedElm, \"a[href]\");\n\n        var linkType;\n        if (self.isImageMode()) {\n            var img;\n            img = self.selectedElm;\n            self.imgElm = img;\n\n            var src = self.dom.getAttrib(self.imgElm, \"src\");\n            var captionText = self.dom.getAttrib(self.imgElm, \"data-captiontext\");\n            self.$title.val(self.dom.getAttrib(self.imgElm, \"title\"));\n            self.$alt.val(self.dom.getAttrib(self.imgElm, \"alt\"));\n\n            if ($(self.imgElm).hasClass(\"zoomable\")) {\n                self.$enableImageZoom.prop(\"checked\", true);\n            }\n            if ($(self.imgElm).hasClass(\"captioned\") && !captionText) {\n                self.$captionFromDescription.prop(\"checked\", true);\n                self.$caption.prop(\"disabled\", true);\n            } else if ($(self.imgElm).hasClass(\"captioned\") && captionText) {\n                self.$captionFromDescription.prop(\"checked\", false);\n            } else {\n                self.$captionFromDescription.prop(\"checked\", false);\n            }\n            if (captionText) {\n                self.$caption.val(captionText);\n            }\n\n            linkType = self.dom.getAttrib(self.imgElm, \"data-linktype\");\n            if (linkType && linkType in self.linkTypes) {\n                self.linkType = linkType;\n                self.linkTypes[self.linkType].load(self.imgElm);\n                // set scale selection in link modal:\n                var pictureVariant = self.dom.getAttrib(\n                    self.imgElm,\n                    \"data-picturevariant\"\n                );\n                self.$scale.val(pictureVariant);\n                $(\"#tinylink-\" + self.linkType, self.modal.$modal).trigger(\"click\");\n            } else if (src) {\n                self.guessImageLink(src);\n            }\n            var className = self.dom.getAttrib(self.imgElm, \"class\");\n            var klasses = className.split(\" \");\n            for (var i = 0; i < klasses.length; i = i + 1) {\n                var klass = klasses[i];\n                for (var availClass in self.options.imageClasses) {\n                    if (availClass.indexOf(klass) !== -1) {\n                        self.$align.val(klass);\n                    }\n                }\n            }\n        } else if (self.anchorElm) {\n            self.focusElement(self.anchorElm);\n            var href = \"\";\n            href = self.dom.getAttrib(self.anchorElm, \"href\");\n            self.$target.val(self.dom.getAttrib(self.anchorElm, \"target\"));\n            self.$title.val(self.dom.getAttrib(self.anchorElm, \"title\"));\n            linkType = self.dom.getAttrib(self.anchorElm, \"data-linktype\");\n            if (linkType) {\n                self.linkType = linkType;\n                self.linkTypes[self.linkType].load(self.anchorElm);\n                var $panel = $(\"#tinylink-\" + self.linkType, self.modal.$modal);\n                // $('#tinylink-' + self.linkType, self.modal.$modal).trigger('click');\n                if ($panel.length === 1) {\n                    $(\"#\" + $panel.data(\"autotoc-trigger-id\")).trigger(\"click\");\n                }\n            } else if (href) {\n                self.guessAnchorLink(href);\n            }\n        }\n    },\n\n    guessImageLink: function (src) {\n        if (src.indexOf(this.options.prependToScalePart) !== -1) {\n            this.linkType = \"image\";\n            // TODO: use data-scale attribute instead:\n            this.$scale.val(this.tinypattern.getScaleFromUrl(src));\n            this.linkTypes.image.set(this.tinypattern.stripGeneratedUrl(src));\n        } else {\n            this.linkType = \"externalImage\";\n            this.linkTypes.externalImage.set(src);\n        }\n    },\n\n    guessAnchorLink: function (href) {\n        if (\n            this.options.prependToUrl &&\n            href.indexOf(this.options.prependToUrl) !== -1\n        ) {\n            // XXX if using default configuration, it gets more difficult\n            // here to detect internal urls so this might need to change...\n            this.linkType = \"internal\";\n            this.linkTypes.internal.set(this.tinypattern.stripGeneratedUrl(href));\n        } else if (href.indexOf(\"mailto:\") !== -1) {\n            this.linkType = \"email\";\n            var email = href.substring(\"mailto:\".length, href.length);\n            var split = email.split(\"?subject=\");\n            this.linkTypes.email.set(split[0]);\n            if (split.length > 1) {\n                this.$subject.val(decodeURIComponent(split[1]));\n            }\n        } else if (href[0] === \"#\") {\n            this.linkType = \"anchor\";\n            this.linkTypes.anchor.set(href.substring(1));\n        } else {\n            this.linkType = \"external\";\n            this.linkTypes.external.set(href);\n        }\n    },\n\n    setSelectElement: function ($el, val) {\n        $el.find(\"option:selected\").prop(\"selected\", false);\n        if (val) {\n            // update\n            $el.find('option[value=\"' + val + '\"]').prop(\"selected\", true);\n        }\n    },\n\n    reinitialize: function () {\n        /*\n         * This will probably be called before show is run.\n         * It will overwrite the base html template given to\n         * be able to privde default values for the overlay\n         */\n        this.modal.options.html = this.generateModalHtml();\n    },\n});\n"],"names":["LinkType","Base","extend","name","trigger","defaults","linkModal","init","this","options","tinypattern","tiny","dom","getEl","$el","find","value","val","trim","toUrl","load","element","getAttrib","attr","set","attributes","updateRelatedItems","ExternalLink","prototype","call","on","$","RegExp","test","split","indexOf","InternalLink","async","length","addClass","createRelatedItems","relatedItems","upload","RelatedItems","events","await_pattern_init","selectItem","select2","generateUrl","UID","UploadLink","getDelegatedLinkType","linkType","linkTypes","image","internal","ImageLink","generateImageUrl","getScaleFromSrcset","$scale","EmailLink","subject","getSubject","href","apply","$subject","attribs","AnchorLink","$select","anchorNodes","anchorData","populate","id","node","i","j","title","self","remove","nodes","select","push","anchorSelector","text","replace","toLowerCase","substring","found","anode","newAnchor","data","append","getIndex","index","parseInt","innerHTML","anchor","initialLinkType","insertHeading","linkTypeClassMapping","external","email","uploadImage","externalImage","linkTypeTemplateMapping","LinkTemplate","ImageTemplate","template","_","modal","registry","patterns","html","generateModalHtml","content","buttons","reloadWindowOnClose","templateOptions","classDialog","actionOptions","backdropOptions","zIndex","closeOnClick","e","modalShown","isOnlyTextSelected","selection","getContent","anchorElm","childNodes","ii","nodeType","insertImageHelp","uploadText","insertLinkHelp","anchorLabel","target","externalText","emailText","subjectText","targetList","titleText","internalImageText","internalImage","externalImageText","altText","alt","imageAlignText","imageAlign","captionFromDescriptionText","captionFromDescription","enableImageZoom","captionText","caption","scaleText","scale","pictureVariants","imageCaptioningEnabled","cancelBtn","insertBtn","isImageMode","initElements","$target","$modal","$button","$title","$alt","$align","$enableImageZoom","$captionFromDescription","$caption","type","$container","instance","classes","eq","className","checked","prop","getLinkUrl","getValue","updateAnchor","focus","setRng","rng","linkAttrs","onlyText","initialText","innerText","textContent","setAttribs","undoManager","add","insertContent","createHTML","encode","execCommand","focusElement","elm","nodeChanged","pictureVariant","pictureVariantsConfig","sourceset","updateImage","src","cssclasses","html_string","imgElm","join","getAttribute","imgWidth","imgHight","width","height","get","setAttrib","onload","onerror","complete","initData","$upload","selectableTypes","folderTypes","PatternUpload","evt","bind","off","preventDefault","stopPropagation","patUpload","patternUpload","dropzone","files","processUpload","counter","checkUpload","setTimeout","hide","error","show","getRng","selectedElm","getNode","getParent","format","rel","img","hasClass","guessImageLink","klasses","klass","availClass","imageClasses","$panel","guessAnchorLink","prependToScalePart","getScaleFromUrl","stripGeneratedUrl","prependToUrl","decodeURIComponent","setSelectElement","reinitialize"],"sourceRoot":""}